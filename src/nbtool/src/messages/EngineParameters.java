// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: EngineParameters.proto

package messages;

public final class EngineParameters {
  private EngineParameters() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface WalkEnginePreferencesOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional float vectorStandComPos_y = 1;
    /**
     * <code>optional float vectorStandComPos_y = 1;</code>
     */
    boolean hasVectorStandComPosY();
    /**
     * <code>optional float vectorStandComPos_y = 1;</code>
     */
    float getVectorStandComPosY();

    // optional float vectorStandComPos_z = 2;
    /**
     * <code>optional float vectorStandComPos_z = 2;</code>
     */
    boolean hasVectorStandComPosZ();
    /**
     * <code>optional float vectorStandComPos_z = 2;</code>
     */
    float getVectorStandComPosZ();

    // optional float standBodyTilt = 3;
    /**
     * <code>optional float standBodyTilt = 3;</code>
     */
    boolean hasStandBodyTilt();
    /**
     * <code>optional float standBodyTilt = 3;</code>
     */
    float getStandBodyTilt();

    // optional float vectorStandArmJointAngle_x = 4;
    /**
     * <code>optional float vectorStandArmJointAngle_x = 4;</code>
     */
    boolean hasVectorStandArmJointAngleX();
    /**
     * <code>optional float vectorStandArmJointAngle_x = 4;</code>
     */
    float getVectorStandArmJointAngleX();

    // optional float vectorStandArmJointAngle_y = 5;
    /**
     * <code>optional float vectorStandArmJointAngle_y = 5;</code>
     */
    boolean hasVectorStandArmJointAngleY();
    /**
     * <code>optional float vectorStandArmJointAngle_y = 5;</code>
     */
    float getVectorStandArmJointAngleY();

    // optional int64 standHardnessAnklePitch = 6;
    /**
     * <code>optional int64 standHardnessAnklePitch = 6;</code>
     */
    boolean hasStandHardnessAnklePitch();
    /**
     * <code>optional int64 standHardnessAnklePitch = 6;</code>
     */
    long getStandHardnessAnklePitch();

    // optional int64 standHardnessAnkleRoll = 7;
    /**
     * <code>optional int64 standHardnessAnkleRoll = 7;</code>
     */
    boolean hasStandHardnessAnkleRoll();
    /**
     * <code>optional int64 standHardnessAnkleRoll = 7;</code>
     */
    long getStandHardnessAnkleRoll();

    // optional float vectorWalkRef_x = 8;
    /**
     * <code>optional float vectorWalkRef_x = 8;</code>
     */
    boolean hasVectorWalkRefX();
    /**
     * <code>optional float vectorWalkRef_x = 8;</code>
     */
    float getVectorWalkRefX();

    // optional float vectorWalkRef_y = 9;
    /**
     * <code>optional float vectorWalkRef_y = 9;</code>
     */
    boolean hasVectorWalkRefY();
    /**
     * <code>optional float vectorWalkRef_y = 9;</code>
     */
    float getVectorWalkRefY();

    // optional float vectorWalkRefAtFullSpeed_x = 10;
    /**
     * <code>optional float vectorWalkRefAtFullSpeed_x = 10;</code>
     */
    boolean hasVectorWalkRefAtFullSpeedX();
    /**
     * <code>optional float vectorWalkRefAtFullSpeed_x = 10;</code>
     */
    float getVectorWalkRefAtFullSpeedX();

    // optional float vectorWalkRefAtFullSpeed_y = 11;
    /**
     * <code>optional float vectorWalkRefAtFullSpeed_y = 11;</code>
     */
    boolean hasVectorWalkRefAtFullSpeedY();
    /**
     * <code>optional float vectorWalkRefAtFullSpeed_y = 11;</code>
     */
    float getVectorWalkRefAtFullSpeedY();

    // optional float rangeWalkRefPlanningLimit_low = 12;
    /**
     * <code>optional float rangeWalkRefPlanningLimit_low = 12;</code>
     */
    boolean hasRangeWalkRefPlanningLimitLow();
    /**
     * <code>optional float rangeWalkRefPlanningLimit_low = 12;</code>
     */
    float getRangeWalkRefPlanningLimitLow();

    // optional float rangeWalkRefPlanningLimit_high = 13;
    /**
     * <code>optional float rangeWalkRefPlanningLimit_high = 13;</code>
     */
    boolean hasRangeWalkRefPlanningLimitHigh();
    /**
     * <code>optional float rangeWalkRefPlanningLimit_high = 13;</code>
     */
    float getRangeWalkRefPlanningLimitHigh();

    // optional float rangeWalkRefXLimit_low = 14;
    /**
     * <code>optional float rangeWalkRefXLimit_low = 14;</code>
     */
    boolean hasRangeWalkRefXLimitLow();
    /**
     * <code>optional float rangeWalkRefXLimit_low = 14;</code>
     */
    float getRangeWalkRefXLimitLow();

    // optional float rangeWalkRefXLimit_high = 15;
    /**
     * <code>optional float rangeWalkRefXLimit_high = 15;</code>
     */
    boolean hasRangeWalkRefXLimitHigh();
    /**
     * <code>optional float rangeWalkRefXLimit_high = 15;</code>
     */
    float getRangeWalkRefXLimitHigh();

    // optional float rangeWalkRefYLimit_low = 16;
    /**
     * <code>optional float rangeWalkRefYLimit_low = 16;</code>
     */
    boolean hasRangeWalkRefYLimitLow();
    /**
     * <code>optional float rangeWalkRefYLimit_low = 16;</code>
     */
    float getRangeWalkRefYLimitLow();

    // optional float rangeWalkRefYLimit_high = 17;
    /**
     * <code>optional float rangeWalkRefYLimit_high = 17;</code>
     */
    boolean hasRangeWalkRefYLimitHigh();
    /**
     * <code>optional float rangeWalkRefYLimit_high = 17;</code>
     */
    float getRangeWalkRefYLimitHigh();

    // optional float rangeWalkStepSizeXPlanningLimit_low = 18;
    /**
     * <code>optional float rangeWalkStepSizeXPlanningLimit_low = 18;</code>
     */
    boolean hasRangeWalkStepSizeXPlanningLimitLow();
    /**
     * <code>optional float rangeWalkStepSizeXPlanningLimit_low = 18;</code>
     */
    float getRangeWalkStepSizeXPlanningLimitLow();

    // optional float rangeWalkStepSizeXPlanningLimit_high = 19;
    /**
     * <code>optional float rangeWalkStepSizeXPlanningLimit_high = 19;</code>
     */
    boolean hasRangeWalkStepSizeXPlanningLimitHigh();
    /**
     * <code>optional float rangeWalkStepSizeXPlanningLimit_high = 19;</code>
     */
    float getRangeWalkStepSizeXPlanningLimitHigh();

    // optional float rangeWalkStepSizeXLimit_low = 20;
    /**
     * <code>optional float rangeWalkStepSizeXLimit_low = 20;</code>
     */
    boolean hasRangeWalkStepSizeXLimitLow();
    /**
     * <code>optional float rangeWalkStepSizeXLimit_low = 20;</code>
     */
    float getRangeWalkStepSizeXLimitLow();

    // optional float rangeWalkStepSizeXLimit_high = 21;
    /**
     * <code>optional float rangeWalkStepSizeXLimit_high = 21;</code>
     */
    boolean hasRangeWalkStepSizeXLimitHigh();
    /**
     * <code>optional float rangeWalkStepSizeXLimit_high = 21;</code>
     */
    float getRangeWalkStepSizeXLimitHigh();

    // optional float walkStepDuration = 22;
    /**
     * <code>optional float walkStepDuration = 22;</code>
     */
    boolean hasWalkStepDuration();
    /**
     * <code>optional float walkStepDuration = 22;</code>
     */
    float getWalkStepDuration();

    // optional float walkStepDurationAtFullSpeedX = 23;
    /**
     * <code>optional float walkStepDurationAtFullSpeedX = 23;</code>
     */
    boolean hasWalkStepDurationAtFullSpeedX();
    /**
     * <code>optional float walkStepDurationAtFullSpeedX = 23;</code>
     */
    float getWalkStepDurationAtFullSpeedX();

    // optional float walkStepDurationAtFullSpeedY = 24;
    /**
     * <code>optional float walkStepDurationAtFullSpeedY = 24;</code>
     */
    boolean hasWalkStepDurationAtFullSpeedY();
    /**
     * <code>optional float walkStepDurationAtFullSpeedY = 24;</code>
     */
    float getWalkStepDurationAtFullSpeedY();

    // optional float vectorWalkHeight_x = 25;
    /**
     * <code>optional float vectorWalkHeight_x = 25;</code>
     */
    boolean hasVectorWalkHeightX();
    /**
     * <code>optional float vectorWalkHeight_x = 25;</code>
     */
    float getVectorWalkHeightX();

    // optional float vectorWalkHeight_y = 26;
    /**
     * <code>optional float vectorWalkHeight_y = 26;</code>
     */
    boolean hasVectorWalkHeightY();
    /**
     * <code>optional float vectorWalkHeight_y = 26;</code>
     */
    float getVectorWalkHeightY();

    // optional float walkArmRotationAtFullSpeedX = 27;
    /**
     * <code>optional float walkArmRotationAtFullSpeedX = 27;</code>
     */
    boolean hasWalkArmRotationAtFullSpeedX();
    /**
     * <code>optional float walkArmRotationAtFullSpeedX = 27;</code>
     */
    float getWalkArmRotationAtFullSpeedX();

    // optional float walkMovePhaseBeginning = 28;
    /**
     * <code>optional float walkMovePhaseBeginning = 28;</code>
     */
    boolean hasWalkMovePhaseBeginning();
    /**
     * <code>optional float walkMovePhaseBeginning = 28;</code>
     */
    float getWalkMovePhaseBeginning();

    // optional float walkMovePhaseLength = 29;
    /**
     * <code>optional float walkMovePhaseLength = 29;</code>
     */
    boolean hasWalkMovePhaseLength();
    /**
     * <code>optional float walkMovePhaseLength = 29;</code>
     */
    float getWalkMovePhaseLength();

    // optional float walkLiftPhaseBeginning = 30;
    /**
     * <code>optional float walkLiftPhaseBeginning = 30;</code>
     */
    boolean hasWalkLiftPhaseBeginning();
    /**
     * <code>optional float walkLiftPhaseBeginning = 30;</code>
     */
    float getWalkLiftPhaseBeginning();

    // optional float walkLiftPhaseLength = 31;
    /**
     * <code>optional float walkLiftPhaseLength = 31;</code>
     */
    boolean hasWalkLiftPhaseLength();
    /**
     * <code>optional float walkLiftPhaseLength = 31;</code>
     */
    float getWalkLiftPhaseLength();

    // optional float vectorWalkLiftOffSet_x = 32;
    /**
     * <code>optional float vectorWalkLiftOffSet_x = 32;</code>
     */
    boolean hasVectorWalkLiftOffSetX();
    /**
     * <code>optional float vectorWalkLiftOffSet_x = 32;</code>
     */
    float getVectorWalkLiftOffSetX();

    // optional float vectorWalkLiftOffSet_y = 33;
    /**
     * <code>optional float vectorWalkLiftOffSet_y = 33;</code>
     */
    boolean hasVectorWalkLiftOffSetY();
    /**
     * <code>optional float vectorWalkLiftOffSet_y = 33;</code>
     */
    float getVectorWalkLiftOffSetY();

    // optional float vectorWalkLiftOffSet_z = 34;
    /**
     * <code>optional float vectorWalkLiftOffSet_z = 34;</code>
     */
    boolean hasVectorWalkLiftOffSetZ();
    /**
     * <code>optional float vectorWalkLiftOffSet_z = 34;</code>
     */
    float getVectorWalkLiftOffSetZ();

    // optional float vectorWalkLiftOffSetAtFullSpeedX_x = 35;
    /**
     * <code>optional float vectorWalkLiftOffSetAtFullSpeedX_x = 35;</code>
     */
    boolean hasVectorWalkLiftOffSetAtFullSpeedXX();
    /**
     * <code>optional float vectorWalkLiftOffSetAtFullSpeedX_x = 35;</code>
     */
    float getVectorWalkLiftOffSetAtFullSpeedXX();

    // optional float vectorWalkLiftOffSetAtFullSpeedX_y = 36;
    /**
     * <code>optional float vectorWalkLiftOffSetAtFullSpeedX_y = 36;</code>
     */
    boolean hasVectorWalkLiftOffSetAtFullSpeedXY();
    /**
     * <code>optional float vectorWalkLiftOffSetAtFullSpeedX_y = 36;</code>
     */
    float getVectorWalkLiftOffSetAtFullSpeedXY();

    // optional float vectorWalkLiftOffSetAtFullSpeedX_z = 37;
    /**
     * <code>optional float vectorWalkLiftOffSetAtFullSpeedX_z = 37;</code>
     */
    boolean hasVectorWalkLiftOffSetAtFullSpeedXZ();
    /**
     * <code>optional float vectorWalkLiftOffSetAtFullSpeedX_z = 37;</code>
     */
    float getVectorWalkLiftOffSetAtFullSpeedXZ();

    // optional float vectorWalkLiftOffSetAtFullSpeedY_x = 38;
    /**
     * <code>optional float vectorWalkLiftOffSetAtFullSpeedY_x = 38;</code>
     */
    boolean hasVectorWalkLiftOffSetAtFullSpeedYX();
    /**
     * <code>optional float vectorWalkLiftOffSetAtFullSpeedY_x = 38;</code>
     */
    float getVectorWalkLiftOffSetAtFullSpeedYX();

    // optional float vectorWalkLiftOffSetAtFullSpeedY_y = 39;
    /**
     * <code>optional float vectorWalkLiftOffSetAtFullSpeedY_y = 39;</code>
     */
    boolean hasVectorWalkLiftOffSetAtFullSpeedYY();
    /**
     * <code>optional float vectorWalkLiftOffSetAtFullSpeedY_y = 39;</code>
     */
    float getVectorWalkLiftOffSetAtFullSpeedYY();

    // optional float vectorWalkLiftOffSetAtFullSpeedY_z = 40;
    /**
     * <code>optional float vectorWalkLiftOffSetAtFullSpeedY_z = 40;</code>
     */
    boolean hasVectorWalkLiftOffSetAtFullSpeedYZ();
    /**
     * <code>optional float vectorWalkLiftOffSetAtFullSpeedY_z = 40;</code>
     */
    float getVectorWalkLiftOffSetAtFullSpeedYZ();

    // optional float vectorWalkLiftRotation_x = 41;
    /**
     * <code>optional float vectorWalkLiftRotation_x = 41;</code>
     */
    boolean hasVectorWalkLiftRotationX();
    /**
     * <code>optional float vectorWalkLiftRotation_x = 41;</code>
     */
    float getVectorWalkLiftRotationX();

    // optional float vectorWalkLiftRotation_y = 42;
    /**
     * <code>optional float vectorWalkLiftRotation_y = 42;</code>
     */
    boolean hasVectorWalkLiftRotationY();
    /**
     * <code>optional float vectorWalkLiftRotation_y = 42;</code>
     */
    float getVectorWalkLiftRotationY();

    // optional float vectorWalkLiftRotation_z = 43;
    /**
     * <code>optional float vectorWalkLiftRotation_z = 43;</code>
     */
    boolean hasVectorWalkLiftRotationZ();
    /**
     * <code>optional float vectorWalkLiftRotation_z = 43;</code>
     */
    float getVectorWalkLiftRotationZ();

    // optional float walkSupportRotation = 44;
    /**
     * <code>optional float walkSupportRotation = 44;</code>
     */
    boolean hasWalkSupportRotation();
    /**
     * <code>optional float walkSupportRotation = 44;</code>
     */
    float getWalkSupportRotation();

    // optional float walkComLiftOffSet_x = 45;
    /**
     * <code>optional float walkComLiftOffSet_x = 45;</code>
     */
    boolean hasWalkComLiftOffSetX();
    /**
     * <code>optional float walkComLiftOffSet_x = 45;</code>
     */
    float getWalkComLiftOffSetX();

    // optional float walkComLiftOffSet_y = 46;
    /**
     * <code>optional float walkComLiftOffSet_y = 46;</code>
     */
    boolean hasWalkComLiftOffSetY();
    /**
     * <code>optional float walkComLiftOffSet_y = 46;</code>
     */
    float getWalkComLiftOffSetY();

    // optional float walkComLiftOffSet_z = 47;
    /**
     * <code>optional float walkComLiftOffSet_z = 47;</code>
     */
    boolean hasWalkComLiftOffSetZ();
    /**
     * <code>optional float walkComLiftOffSet_z = 47;</code>
     */
    float getWalkComLiftOffSetZ();

    // optional float walkComBodyRotation = 48;
    /**
     * <code>optional float walkComBodyRotation = 48;</code>
     */
    boolean hasWalkComBodyRotation();
    /**
     * <code>optional float walkComBodyRotation = 48;</code>
     */
    float getWalkComBodyRotation();

    // optional float speedMax_rot = 49;
    /**
     * <code>optional float speedMax_rot = 49;</code>
     */
    boolean hasSpeedMaxRot();
    /**
     * <code>optional float speedMax_rot = 49;</code>
     */
    float getSpeedMaxRot();

    // optional float speedMax_Vector_x = 50;
    /**
     * <code>optional float speedMax_Vector_x = 50;</code>
     */
    boolean hasSpeedMaxVectorX();
    /**
     * <code>optional float speedMax_Vector_x = 50;</code>
     */
    float getSpeedMaxVectorX();

    // optional float speedMax_Vector_y = 51;
    /**
     * <code>optional float speedMax_Vector_y = 51;</code>
     */
    boolean hasSpeedMaxVectorY();
    /**
     * <code>optional float speedMax_Vector_y = 51;</code>
     */
    float getSpeedMaxVectorY();

    // optional float speedMaxBackwards = 52;
    /**
     * <code>optional float speedMaxBackwards = 52;</code>
     */
    boolean hasSpeedMaxBackwards();
    /**
     * <code>optional float speedMaxBackwards = 52;</code>
     */
    float getSpeedMaxBackwards();

    // optional float speedMaxChange_rot = 53;
    /**
     * <code>optional float speedMaxChange_rot = 53;</code>
     */
    boolean hasSpeedMaxChangeRot();
    /**
     * <code>optional float speedMaxChange_rot = 53;</code>
     */
    float getSpeedMaxChangeRot();

    // optional float speedMaxChange_Vector_x = 54;
    /**
     * <code>optional float speedMaxChange_Vector_x = 54;</code>
     */
    boolean hasSpeedMaxChangeVectorX();
    /**
     * <code>optional float speedMaxChange_Vector_x = 54;</code>
     */
    float getSpeedMaxChangeVectorX();

    // optional float speedMaxChange_Vector_y = 55;
    /**
     * <code>optional float speedMaxChange_Vector_y = 55;</code>
     */
    boolean hasSpeedMaxChangeVectorY();
    /**
     * <code>optional float speedMaxChange_Vector_y = 55;</code>
     */
    float getSpeedMaxChangeVectorY();

    // optional bool balance = 56;
    /**
     * <code>optional bool balance = 56;</code>
     */
    boolean hasBalance();
    /**
     * <code>optional bool balance = 56;</code>
     */
    boolean getBalance();

    // optional float vectorBalanceBodyRotation_x = 57;
    /**
     * <code>optional float vectorBalanceBodyRotation_x = 57;</code>
     */
    boolean hasVectorBalanceBodyRotationX();
    /**
     * <code>optional float vectorBalanceBodyRotation_x = 57;</code>
     */
    float getVectorBalanceBodyRotationX();

    // optional float vectorBalanceBodyRotation_y = 58;
    /**
     * <code>optional float vectorBalanceBodyRotation_y = 58;</code>
     */
    boolean hasVectorBalanceBodyRotationY();
    /**
     * <code>optional float vectorBalanceBodyRotation_y = 58;</code>
     */
    float getVectorBalanceBodyRotationY();

    // optional float vectorBalanceCom_x = 59;
    /**
     * <code>optional float vectorBalanceCom_x = 59;</code>
     */
    boolean hasVectorBalanceComX();
    /**
     * <code>optional float vectorBalanceCom_x = 59;</code>
     */
    float getVectorBalanceComX();

    // optional float vectorBalanceCom_y = 60;
    /**
     * <code>optional float vectorBalanceCom_y = 60;</code>
     */
    boolean hasVectorBalanceComY();
    /**
     * <code>optional float vectorBalanceCom_y = 60;</code>
     */
    float getVectorBalanceComY();

    // optional float vectorBalanceComVelocity_x = 61;
    /**
     * <code>optional float vectorBalanceComVelocity_x = 61;</code>
     */
    boolean hasVectorBalanceComVelocityX();
    /**
     * <code>optional float vectorBalanceComVelocity_x = 61;</code>
     */
    float getVectorBalanceComVelocityX();

    // optional float vectorBalanceComVelocity_y = 62;
    /**
     * <code>optional float vectorBalanceComVelocity_y = 62;</code>
     */
    boolean hasVectorBalanceComVelocityY();
    /**
     * <code>optional float vectorBalanceComVelocity_y = 62;</code>
     */
    float getVectorBalanceComVelocityY();

    // optional float vectorBalanceRef_x = 63;
    /**
     * <code>optional float vectorBalanceRef_x = 63;</code>
     */
    boolean hasVectorBalanceRefX();
    /**
     * <code>optional float vectorBalanceRef_x = 63;</code>
     */
    float getVectorBalanceRefX();

    // optional float vectorBalanceRef_y = 64;
    /**
     * <code>optional float vectorBalanceRef_y = 64;</code>
     */
    boolean hasVectorBalanceRefY();
    /**
     * <code>optional float vectorBalanceRef_y = 64;</code>
     */
    float getVectorBalanceRefY();

    // optional float vectorBalanceNextRef_x = 65;
    /**
     * <code>optional float vectorBalanceNextRef_x = 65;</code>
     */
    boolean hasVectorBalanceNextRefX();
    /**
     * <code>optional float vectorBalanceNextRef_x = 65;</code>
     */
    float getVectorBalanceNextRefX();

    // optional float vectorBalanceNextRef_y = 66;
    /**
     * <code>optional float vectorBalanceNextRef_y = 66;</code>
     */
    boolean hasVectorBalanceNextRefY();
    /**
     * <code>optional float vectorBalanceNextRef_y = 66;</code>
     */
    float getVectorBalanceNextRefY();

    // optional float vectorBalanceStepSize_x = 67;
    /**
     * <code>optional float vectorBalanceStepSize_x = 67;</code>
     */
    boolean hasVectorBalanceStepSizeX();
    /**
     * <code>optional float vectorBalanceStepSize_x = 67;</code>
     */
    float getVectorBalanceStepSizeX();

    // optional float vectorBalanceStepSize_y = 68;
    /**
     * <code>optional float vectorBalanceStepSize_y = 68;</code>
     */
    boolean hasVectorBalanceStepSizeY();
    /**
     * <code>optional float vectorBalanceStepSize_y = 68;</code>
     */
    float getVectorBalanceStepSizeY();

    // optional float observerMeasurementDelay = 69;
    /**
     * <code>optional float observerMeasurementDelay = 69;</code>
     */
    boolean hasObserverMeasurementDelay();
    /**
     * <code>optional float observerMeasurementDelay = 69;</code>
     */
    float getObserverMeasurementDelay();

    // optional float vectorObserverMeasurementDeviation_x = 70;
    /**
     * <code>optional float vectorObserverMeasurementDeviation_x = 70;</code>
     */
    boolean hasVectorObserverMeasurementDeviationX();
    /**
     * <code>optional float vectorObserverMeasurementDeviation_x = 70;</code>
     */
    float getVectorObserverMeasurementDeviationX();

    // optional float vectorObserverMeasurementDeviation_y = 71;
    /**
     * <code>optional float vectorObserverMeasurementDeviation_y = 71;</code>
     */
    boolean hasVectorObserverMeasurementDeviationY();
    /**
     * <code>optional float vectorObserverMeasurementDeviation_y = 71;</code>
     */
    float getVectorObserverMeasurementDeviationY();

    // optional float vectorObserverProcessDeviation_x = 72;
    /**
     * <code>optional float vectorObserverProcessDeviation_x = 72;</code>
     */
    boolean hasVectorObserverProcessDeviationX();
    /**
     * <code>optional float vectorObserverProcessDeviation_x = 72;</code>
     */
    float getVectorObserverProcessDeviationX();

    // optional float vectorObserverProcessDeviation_y = 73;
    /**
     * <code>optional float vectorObserverProcessDeviation_y = 73;</code>
     */
    boolean hasVectorObserverProcessDeviationY();
    /**
     * <code>optional float vectorObserverProcessDeviation_y = 73;</code>
     */
    float getVectorObserverProcessDeviationY();

    // optional float vectorObserverProcessDeviation_z = 74;
    /**
     * <code>optional float vectorObserverProcessDeviation_z = 74;</code>
     */
    boolean hasVectorObserverProcessDeviationZ();
    /**
     * <code>optional float vectorObserverProcessDeviation_z = 74;</code>
     */
    float getVectorObserverProcessDeviationZ();

    // optional float vectorObserverProcessDeviation_w = 75;
    /**
     * <code>optional float vectorObserverProcessDeviation_w = 75;</code>
     */
    boolean hasVectorObserverProcessDeviationW();
    /**
     * <code>optional float vectorObserverProcessDeviation_w = 75;</code>
     */
    float getVectorObserverProcessDeviationW();

    // optional float odometryScale_rot = 76;
    /**
     * <code>optional float odometryScale_rot = 76;</code>
     */
    boolean hasOdometryScaleRot();
    /**
     * <code>optional float odometryScale_rot = 76;</code>
     */
    float getOdometryScaleRot();

    // optional float odometryScale_Vector_x = 77;
    /**
     * <code>optional float odometryScale_Vector_x = 77;</code>
     */
    boolean hasOdometryScaleVectorX();
    /**
     * <code>optional float odometryScale_Vector_x = 77;</code>
     */
    float getOdometryScaleVectorX();

    // optional float odometryScale_Vector_y = 78;
    /**
     * <code>optional float odometryScale_Vector_y = 78;</code>
     */
    boolean hasOdometryScaleVectorY();
    /**
     * <code>optional float odometryScale_Vector_y = 78;</code>
     */
    float getOdometryScaleVectorY();

    // optional float gyroStateGain = 79;
    /**
     * <code>optional float gyroStateGain = 79;</code>
     */
    boolean hasGyroStateGain();
    /**
     * <code>optional float gyroStateGain = 79;</code>
     */
    float getGyroStateGain();

    // optional float gyroDerivativeGain = 80;
    /**
     * <code>optional float gyroDerivativeGain = 80;</code>
     */
    boolean hasGyroDerivativeGain();
    /**
     * <code>optional float gyroDerivativeGain = 80;</code>
     */
    float getGyroDerivativeGain();

    // optional float gyroSmoothing = 81;
    /**
     * <code>optional float gyroSmoothing = 81;</code>
     */
    boolean hasGyroSmoothing();
    /**
     * <code>optional float gyroSmoothing = 81;</code>
     */
    float getGyroSmoothing();

    // optional float minRotationToReduceStepSize = 82;
    /**
     * <code>optional float minRotationToReduceStepSize = 82;</code>
     */
    boolean hasMinRotationToReduceStepSize();
    /**
     * <code>optional float minRotationToReduceStepSize = 82;</code>
     */
    float getMinRotationToReduceStepSize();
  }
  /**
   * Protobuf type {@code messages.WalkEnginePreferences}
   *
   * <pre>
   *Com = center of mass.
   *any parameter that is part of a vector will have "vector" in its name.
   * </pre>
   */
  public static final class WalkEnginePreferences extends
      com.google.protobuf.GeneratedMessage
      implements WalkEnginePreferencesOrBuilder {
    // Use WalkEnginePreferences.newBuilder() to construct.
    private WalkEnginePreferences(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private WalkEnginePreferences(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final WalkEnginePreferences defaultInstance;
    public static WalkEnginePreferences getDefaultInstance() {
      return defaultInstance;
    }

    public WalkEnginePreferences getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private WalkEnginePreferences(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      int mutable_bitField1_ = 0;
      int mutable_bitField2_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 13: {
              bitField0_ |= 0x00000001;
              vectorStandComPosY_ = input.readFloat();
              break;
            }
            case 21: {
              bitField0_ |= 0x00000002;
              vectorStandComPosZ_ = input.readFloat();
              break;
            }
            case 29: {
              bitField0_ |= 0x00000004;
              standBodyTilt_ = input.readFloat();
              break;
            }
            case 37: {
              bitField0_ |= 0x00000008;
              vectorStandArmJointAngleX_ = input.readFloat();
              break;
            }
            case 45: {
              bitField0_ |= 0x00000010;
              vectorStandArmJointAngleY_ = input.readFloat();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              standHardnessAnklePitch_ = input.readInt64();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              standHardnessAnkleRoll_ = input.readInt64();
              break;
            }
            case 69: {
              bitField0_ |= 0x00000080;
              vectorWalkRefX_ = input.readFloat();
              break;
            }
            case 77: {
              bitField0_ |= 0x00000100;
              vectorWalkRefY_ = input.readFloat();
              break;
            }
            case 85: {
              bitField0_ |= 0x00000200;
              vectorWalkRefAtFullSpeedX_ = input.readFloat();
              break;
            }
            case 93: {
              bitField0_ |= 0x00000400;
              vectorWalkRefAtFullSpeedY_ = input.readFloat();
              break;
            }
            case 101: {
              bitField0_ |= 0x00000800;
              rangeWalkRefPlanningLimitLow_ = input.readFloat();
              break;
            }
            case 109: {
              bitField0_ |= 0x00001000;
              rangeWalkRefPlanningLimitHigh_ = input.readFloat();
              break;
            }
            case 117: {
              bitField0_ |= 0x00002000;
              rangeWalkRefXLimitLow_ = input.readFloat();
              break;
            }
            case 125: {
              bitField0_ |= 0x00004000;
              rangeWalkRefXLimitHigh_ = input.readFloat();
              break;
            }
            case 133: {
              bitField0_ |= 0x00008000;
              rangeWalkRefYLimitLow_ = input.readFloat();
              break;
            }
            case 141: {
              bitField0_ |= 0x00010000;
              rangeWalkRefYLimitHigh_ = input.readFloat();
              break;
            }
            case 149: {
              bitField0_ |= 0x00020000;
              rangeWalkStepSizeXPlanningLimitLow_ = input.readFloat();
              break;
            }
            case 157: {
              bitField0_ |= 0x00040000;
              rangeWalkStepSizeXPlanningLimitHigh_ = input.readFloat();
              break;
            }
            case 165: {
              bitField0_ |= 0x00080000;
              rangeWalkStepSizeXLimitLow_ = input.readFloat();
              break;
            }
            case 173: {
              bitField0_ |= 0x00100000;
              rangeWalkStepSizeXLimitHigh_ = input.readFloat();
              break;
            }
            case 181: {
              bitField0_ |= 0x00200000;
              walkStepDuration_ = input.readFloat();
              break;
            }
            case 189: {
              bitField0_ |= 0x00400000;
              walkStepDurationAtFullSpeedX_ = input.readFloat();
              break;
            }
            case 197: {
              bitField0_ |= 0x00800000;
              walkStepDurationAtFullSpeedY_ = input.readFloat();
              break;
            }
            case 205: {
              bitField0_ |= 0x01000000;
              vectorWalkHeightX_ = input.readFloat();
              break;
            }
            case 213: {
              bitField0_ |= 0x02000000;
              vectorWalkHeightY_ = input.readFloat();
              break;
            }
            case 221: {
              bitField0_ |= 0x04000000;
              walkArmRotationAtFullSpeedX_ = input.readFloat();
              break;
            }
            case 229: {
              bitField0_ |= 0x08000000;
              walkMovePhaseBeginning_ = input.readFloat();
              break;
            }
            case 237: {
              bitField0_ |= 0x10000000;
              walkMovePhaseLength_ = input.readFloat();
              break;
            }
            case 245: {
              bitField0_ |= 0x20000000;
              walkLiftPhaseBeginning_ = input.readFloat();
              break;
            }
            case 253: {
              bitField0_ |= 0x40000000;
              walkLiftPhaseLength_ = input.readFloat();
              break;
            }
            case 261: {
              bitField0_ |= 0x80000000;
              vectorWalkLiftOffSetX_ = input.readFloat();
              break;
            }
            case 269: {
              bitField1_ |= 0x00000001;
              vectorWalkLiftOffSetY_ = input.readFloat();
              break;
            }
            case 277: {
              bitField1_ |= 0x00000002;
              vectorWalkLiftOffSetZ_ = input.readFloat();
              break;
            }
            case 285: {
              bitField1_ |= 0x00000004;
              vectorWalkLiftOffSetAtFullSpeedXX_ = input.readFloat();
              break;
            }
            case 293: {
              bitField1_ |= 0x00000008;
              vectorWalkLiftOffSetAtFullSpeedXY_ = input.readFloat();
              break;
            }
            case 301: {
              bitField1_ |= 0x00000010;
              vectorWalkLiftOffSetAtFullSpeedXZ_ = input.readFloat();
              break;
            }
            case 309: {
              bitField1_ |= 0x00000020;
              vectorWalkLiftOffSetAtFullSpeedYX_ = input.readFloat();
              break;
            }
            case 317: {
              bitField1_ |= 0x00000040;
              vectorWalkLiftOffSetAtFullSpeedYY_ = input.readFloat();
              break;
            }
            case 325: {
              bitField1_ |= 0x00000080;
              vectorWalkLiftOffSetAtFullSpeedYZ_ = input.readFloat();
              break;
            }
            case 333: {
              bitField1_ |= 0x00000100;
              vectorWalkLiftRotationX_ = input.readFloat();
              break;
            }
            case 341: {
              bitField1_ |= 0x00000200;
              vectorWalkLiftRotationY_ = input.readFloat();
              break;
            }
            case 349: {
              bitField1_ |= 0x00000400;
              vectorWalkLiftRotationZ_ = input.readFloat();
              break;
            }
            case 357: {
              bitField1_ |= 0x00000800;
              walkSupportRotation_ = input.readFloat();
              break;
            }
            case 365: {
              bitField1_ |= 0x00001000;
              walkComLiftOffSetX_ = input.readFloat();
              break;
            }
            case 373: {
              bitField1_ |= 0x00002000;
              walkComLiftOffSetY_ = input.readFloat();
              break;
            }
            case 381: {
              bitField1_ |= 0x00004000;
              walkComLiftOffSetZ_ = input.readFloat();
              break;
            }
            case 389: {
              bitField1_ |= 0x00008000;
              walkComBodyRotation_ = input.readFloat();
              break;
            }
            case 397: {
              bitField1_ |= 0x00010000;
              speedMaxRot_ = input.readFloat();
              break;
            }
            case 405: {
              bitField1_ |= 0x00020000;
              speedMaxVectorX_ = input.readFloat();
              break;
            }
            case 413: {
              bitField1_ |= 0x00040000;
              speedMaxVectorY_ = input.readFloat();
              break;
            }
            case 421: {
              bitField1_ |= 0x00080000;
              speedMaxBackwards_ = input.readFloat();
              break;
            }
            case 429: {
              bitField1_ |= 0x00100000;
              speedMaxChangeRot_ = input.readFloat();
              break;
            }
            case 437: {
              bitField1_ |= 0x00200000;
              speedMaxChangeVectorX_ = input.readFloat();
              break;
            }
            case 445: {
              bitField1_ |= 0x00400000;
              speedMaxChangeVectorY_ = input.readFloat();
              break;
            }
            case 448: {
              bitField1_ |= 0x00800000;
              balance_ = input.readBool();
              break;
            }
            case 461: {
              bitField1_ |= 0x01000000;
              vectorBalanceBodyRotationX_ = input.readFloat();
              break;
            }
            case 469: {
              bitField1_ |= 0x02000000;
              vectorBalanceBodyRotationY_ = input.readFloat();
              break;
            }
            case 477: {
              bitField1_ |= 0x04000000;
              vectorBalanceComX_ = input.readFloat();
              break;
            }
            case 485: {
              bitField1_ |= 0x08000000;
              vectorBalanceComY_ = input.readFloat();
              break;
            }
            case 493: {
              bitField1_ |= 0x10000000;
              vectorBalanceComVelocityX_ = input.readFloat();
              break;
            }
            case 501: {
              bitField1_ |= 0x20000000;
              vectorBalanceComVelocityY_ = input.readFloat();
              break;
            }
            case 509: {
              bitField1_ |= 0x40000000;
              vectorBalanceRefX_ = input.readFloat();
              break;
            }
            case 517: {
              bitField1_ |= 0x80000000;
              vectorBalanceRefY_ = input.readFloat();
              break;
            }
            case 525: {
              bitField2_ |= 0x00000001;
              vectorBalanceNextRefX_ = input.readFloat();
              break;
            }
            case 533: {
              bitField2_ |= 0x00000002;
              vectorBalanceNextRefY_ = input.readFloat();
              break;
            }
            case 541: {
              bitField2_ |= 0x00000004;
              vectorBalanceStepSizeX_ = input.readFloat();
              break;
            }
            case 549: {
              bitField2_ |= 0x00000008;
              vectorBalanceStepSizeY_ = input.readFloat();
              break;
            }
            case 557: {
              bitField2_ |= 0x00000010;
              observerMeasurementDelay_ = input.readFloat();
              break;
            }
            case 565: {
              bitField2_ |= 0x00000020;
              vectorObserverMeasurementDeviationX_ = input.readFloat();
              break;
            }
            case 573: {
              bitField2_ |= 0x00000040;
              vectorObserverMeasurementDeviationY_ = input.readFloat();
              break;
            }
            case 581: {
              bitField2_ |= 0x00000080;
              vectorObserverProcessDeviationX_ = input.readFloat();
              break;
            }
            case 589: {
              bitField2_ |= 0x00000100;
              vectorObserverProcessDeviationY_ = input.readFloat();
              break;
            }
            case 597: {
              bitField2_ |= 0x00000200;
              vectorObserverProcessDeviationZ_ = input.readFloat();
              break;
            }
            case 605: {
              bitField2_ |= 0x00000400;
              vectorObserverProcessDeviationW_ = input.readFloat();
              break;
            }
            case 613: {
              bitField2_ |= 0x00000800;
              odometryScaleRot_ = input.readFloat();
              break;
            }
            case 621: {
              bitField2_ |= 0x00001000;
              odometryScaleVectorX_ = input.readFloat();
              break;
            }
            case 629: {
              bitField2_ |= 0x00002000;
              odometryScaleVectorY_ = input.readFloat();
              break;
            }
            case 637: {
              bitField2_ |= 0x00004000;
              gyroStateGain_ = input.readFloat();
              break;
            }
            case 645: {
              bitField2_ |= 0x00008000;
              gyroDerivativeGain_ = input.readFloat();
              break;
            }
            case 653: {
              bitField2_ |= 0x00010000;
              gyroSmoothing_ = input.readFloat();
              break;
            }
            case 661: {
              bitField2_ |= 0x00020000;
              minRotationToReduceStepSize_ = input.readFloat();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return messages.EngineParameters.internal_static_messages_WalkEnginePreferences_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return messages.EngineParameters.internal_static_messages_WalkEnginePreferences_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              messages.EngineParameters.WalkEnginePreferences.class, messages.EngineParameters.WalkEnginePreferences.Builder.class);
    }

    public static com.google.protobuf.Parser<WalkEnginePreferences> PARSER =
        new com.google.protobuf.AbstractParser<WalkEnginePreferences>() {
      public WalkEnginePreferences parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new WalkEnginePreferences(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<WalkEnginePreferences> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    private int bitField1_;
    private int bitField2_;
    // optional float vectorStandComPos_y = 1;
    public static final int VECTORSTANDCOMPOS_Y_FIELD_NUMBER = 1;
    private float vectorStandComPosY_;
    /**
     * <code>optional float vectorStandComPos_y = 1;</code>
     */
    public boolean hasVectorStandComPosY() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional float vectorStandComPos_y = 1;</code>
     */
    public float getVectorStandComPosY() {
      return vectorStandComPosY_;
    }

    // optional float vectorStandComPos_z = 2;
    public static final int VECTORSTANDCOMPOS_Z_FIELD_NUMBER = 2;
    private float vectorStandComPosZ_;
    /**
     * <code>optional float vectorStandComPos_z = 2;</code>
     */
    public boolean hasVectorStandComPosZ() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional float vectorStandComPos_z = 2;</code>
     */
    public float getVectorStandComPosZ() {
      return vectorStandComPosZ_;
    }

    // optional float standBodyTilt = 3;
    public static final int STANDBODYTILT_FIELD_NUMBER = 3;
    private float standBodyTilt_;
    /**
     * <code>optional float standBodyTilt = 3;</code>
     */
    public boolean hasStandBodyTilt() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional float standBodyTilt = 3;</code>
     */
    public float getStandBodyTilt() {
      return standBodyTilt_;
    }

    // optional float vectorStandArmJointAngle_x = 4;
    public static final int VECTORSTANDARMJOINTANGLE_X_FIELD_NUMBER = 4;
    private float vectorStandArmJointAngleX_;
    /**
     * <code>optional float vectorStandArmJointAngle_x = 4;</code>
     */
    public boolean hasVectorStandArmJointAngleX() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional float vectorStandArmJointAngle_x = 4;</code>
     */
    public float getVectorStandArmJointAngleX() {
      return vectorStandArmJointAngleX_;
    }

    // optional float vectorStandArmJointAngle_y = 5;
    public static final int VECTORSTANDARMJOINTANGLE_Y_FIELD_NUMBER = 5;
    private float vectorStandArmJointAngleY_;
    /**
     * <code>optional float vectorStandArmJointAngle_y = 5;</code>
     */
    public boolean hasVectorStandArmJointAngleY() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional float vectorStandArmJointAngle_y = 5;</code>
     */
    public float getVectorStandArmJointAngleY() {
      return vectorStandArmJointAngleY_;
    }

    // optional int64 standHardnessAnklePitch = 6;
    public static final int STANDHARDNESSANKLEPITCH_FIELD_NUMBER = 6;
    private long standHardnessAnklePitch_;
    /**
     * <code>optional int64 standHardnessAnklePitch = 6;</code>
     */
    public boolean hasStandHardnessAnklePitch() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional int64 standHardnessAnklePitch = 6;</code>
     */
    public long getStandHardnessAnklePitch() {
      return standHardnessAnklePitch_;
    }

    // optional int64 standHardnessAnkleRoll = 7;
    public static final int STANDHARDNESSANKLEROLL_FIELD_NUMBER = 7;
    private long standHardnessAnkleRoll_;
    /**
     * <code>optional int64 standHardnessAnkleRoll = 7;</code>
     */
    public boolean hasStandHardnessAnkleRoll() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional int64 standHardnessAnkleRoll = 7;</code>
     */
    public long getStandHardnessAnkleRoll() {
      return standHardnessAnkleRoll_;
    }

    // optional float vectorWalkRef_x = 8;
    public static final int VECTORWALKREF_X_FIELD_NUMBER = 8;
    private float vectorWalkRefX_;
    /**
     * <code>optional float vectorWalkRef_x = 8;</code>
     */
    public boolean hasVectorWalkRefX() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional float vectorWalkRef_x = 8;</code>
     */
    public float getVectorWalkRefX() {
      return vectorWalkRefX_;
    }

    // optional float vectorWalkRef_y = 9;
    public static final int VECTORWALKREF_Y_FIELD_NUMBER = 9;
    private float vectorWalkRefY_;
    /**
     * <code>optional float vectorWalkRef_y = 9;</code>
     */
    public boolean hasVectorWalkRefY() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional float vectorWalkRef_y = 9;</code>
     */
    public float getVectorWalkRefY() {
      return vectorWalkRefY_;
    }

    // optional float vectorWalkRefAtFullSpeed_x = 10;
    public static final int VECTORWALKREFATFULLSPEED_X_FIELD_NUMBER = 10;
    private float vectorWalkRefAtFullSpeedX_;
    /**
     * <code>optional float vectorWalkRefAtFullSpeed_x = 10;</code>
     */
    public boolean hasVectorWalkRefAtFullSpeedX() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional float vectorWalkRefAtFullSpeed_x = 10;</code>
     */
    public float getVectorWalkRefAtFullSpeedX() {
      return vectorWalkRefAtFullSpeedX_;
    }

    // optional float vectorWalkRefAtFullSpeed_y = 11;
    public static final int VECTORWALKREFATFULLSPEED_Y_FIELD_NUMBER = 11;
    private float vectorWalkRefAtFullSpeedY_;
    /**
     * <code>optional float vectorWalkRefAtFullSpeed_y = 11;</code>
     */
    public boolean hasVectorWalkRefAtFullSpeedY() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional float vectorWalkRefAtFullSpeed_y = 11;</code>
     */
    public float getVectorWalkRefAtFullSpeedY() {
      return vectorWalkRefAtFullSpeedY_;
    }

    // optional float rangeWalkRefPlanningLimit_low = 12;
    public static final int RANGEWALKREFPLANNINGLIMIT_LOW_FIELD_NUMBER = 12;
    private float rangeWalkRefPlanningLimitLow_;
    /**
     * <code>optional float rangeWalkRefPlanningLimit_low = 12;</code>
     */
    public boolean hasRangeWalkRefPlanningLimitLow() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional float rangeWalkRefPlanningLimit_low = 12;</code>
     */
    public float getRangeWalkRefPlanningLimitLow() {
      return rangeWalkRefPlanningLimitLow_;
    }

    // optional float rangeWalkRefPlanningLimit_high = 13;
    public static final int RANGEWALKREFPLANNINGLIMIT_HIGH_FIELD_NUMBER = 13;
    private float rangeWalkRefPlanningLimitHigh_;
    /**
     * <code>optional float rangeWalkRefPlanningLimit_high = 13;</code>
     */
    public boolean hasRangeWalkRefPlanningLimitHigh() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>optional float rangeWalkRefPlanningLimit_high = 13;</code>
     */
    public float getRangeWalkRefPlanningLimitHigh() {
      return rangeWalkRefPlanningLimitHigh_;
    }

    // optional float rangeWalkRefXLimit_low = 14;
    public static final int RANGEWALKREFXLIMIT_LOW_FIELD_NUMBER = 14;
    private float rangeWalkRefXLimitLow_;
    /**
     * <code>optional float rangeWalkRefXLimit_low = 14;</code>
     */
    public boolean hasRangeWalkRefXLimitLow() {
      return ((bitField0_ & 0x00002000) == 0x00002000);
    }
    /**
     * <code>optional float rangeWalkRefXLimit_low = 14;</code>
     */
    public float getRangeWalkRefXLimitLow() {
      return rangeWalkRefXLimitLow_;
    }

    // optional float rangeWalkRefXLimit_high = 15;
    public static final int RANGEWALKREFXLIMIT_HIGH_FIELD_NUMBER = 15;
    private float rangeWalkRefXLimitHigh_;
    /**
     * <code>optional float rangeWalkRefXLimit_high = 15;</code>
     */
    public boolean hasRangeWalkRefXLimitHigh() {
      return ((bitField0_ & 0x00004000) == 0x00004000);
    }
    /**
     * <code>optional float rangeWalkRefXLimit_high = 15;</code>
     */
    public float getRangeWalkRefXLimitHigh() {
      return rangeWalkRefXLimitHigh_;
    }

    // optional float rangeWalkRefYLimit_low = 16;
    public static final int RANGEWALKREFYLIMIT_LOW_FIELD_NUMBER = 16;
    private float rangeWalkRefYLimitLow_;
    /**
     * <code>optional float rangeWalkRefYLimit_low = 16;</code>
     */
    public boolean hasRangeWalkRefYLimitLow() {
      return ((bitField0_ & 0x00008000) == 0x00008000);
    }
    /**
     * <code>optional float rangeWalkRefYLimit_low = 16;</code>
     */
    public float getRangeWalkRefYLimitLow() {
      return rangeWalkRefYLimitLow_;
    }

    // optional float rangeWalkRefYLimit_high = 17;
    public static final int RANGEWALKREFYLIMIT_HIGH_FIELD_NUMBER = 17;
    private float rangeWalkRefYLimitHigh_;
    /**
     * <code>optional float rangeWalkRefYLimit_high = 17;</code>
     */
    public boolean hasRangeWalkRefYLimitHigh() {
      return ((bitField0_ & 0x00010000) == 0x00010000);
    }
    /**
     * <code>optional float rangeWalkRefYLimit_high = 17;</code>
     */
    public float getRangeWalkRefYLimitHigh() {
      return rangeWalkRefYLimitHigh_;
    }

    // optional float rangeWalkStepSizeXPlanningLimit_low = 18;
    public static final int RANGEWALKSTEPSIZEXPLANNINGLIMIT_LOW_FIELD_NUMBER = 18;
    private float rangeWalkStepSizeXPlanningLimitLow_;
    /**
     * <code>optional float rangeWalkStepSizeXPlanningLimit_low = 18;</code>
     */
    public boolean hasRangeWalkStepSizeXPlanningLimitLow() {
      return ((bitField0_ & 0x00020000) == 0x00020000);
    }
    /**
     * <code>optional float rangeWalkStepSizeXPlanningLimit_low = 18;</code>
     */
    public float getRangeWalkStepSizeXPlanningLimitLow() {
      return rangeWalkStepSizeXPlanningLimitLow_;
    }

    // optional float rangeWalkStepSizeXPlanningLimit_high = 19;
    public static final int RANGEWALKSTEPSIZEXPLANNINGLIMIT_HIGH_FIELD_NUMBER = 19;
    private float rangeWalkStepSizeXPlanningLimitHigh_;
    /**
     * <code>optional float rangeWalkStepSizeXPlanningLimit_high = 19;</code>
     */
    public boolean hasRangeWalkStepSizeXPlanningLimitHigh() {
      return ((bitField0_ & 0x00040000) == 0x00040000);
    }
    /**
     * <code>optional float rangeWalkStepSizeXPlanningLimit_high = 19;</code>
     */
    public float getRangeWalkStepSizeXPlanningLimitHigh() {
      return rangeWalkStepSizeXPlanningLimitHigh_;
    }

    // optional float rangeWalkStepSizeXLimit_low = 20;
    public static final int RANGEWALKSTEPSIZEXLIMIT_LOW_FIELD_NUMBER = 20;
    private float rangeWalkStepSizeXLimitLow_;
    /**
     * <code>optional float rangeWalkStepSizeXLimit_low = 20;</code>
     */
    public boolean hasRangeWalkStepSizeXLimitLow() {
      return ((bitField0_ & 0x00080000) == 0x00080000);
    }
    /**
     * <code>optional float rangeWalkStepSizeXLimit_low = 20;</code>
     */
    public float getRangeWalkStepSizeXLimitLow() {
      return rangeWalkStepSizeXLimitLow_;
    }

    // optional float rangeWalkStepSizeXLimit_high = 21;
    public static final int RANGEWALKSTEPSIZEXLIMIT_HIGH_FIELD_NUMBER = 21;
    private float rangeWalkStepSizeXLimitHigh_;
    /**
     * <code>optional float rangeWalkStepSizeXLimit_high = 21;</code>
     */
    public boolean hasRangeWalkStepSizeXLimitHigh() {
      return ((bitField0_ & 0x00100000) == 0x00100000);
    }
    /**
     * <code>optional float rangeWalkStepSizeXLimit_high = 21;</code>
     */
    public float getRangeWalkStepSizeXLimitHigh() {
      return rangeWalkStepSizeXLimitHigh_;
    }

    // optional float walkStepDuration = 22;
    public static final int WALKSTEPDURATION_FIELD_NUMBER = 22;
    private float walkStepDuration_;
    /**
     * <code>optional float walkStepDuration = 22;</code>
     */
    public boolean hasWalkStepDuration() {
      return ((bitField0_ & 0x00200000) == 0x00200000);
    }
    /**
     * <code>optional float walkStepDuration = 22;</code>
     */
    public float getWalkStepDuration() {
      return walkStepDuration_;
    }

    // optional float walkStepDurationAtFullSpeedX = 23;
    public static final int WALKSTEPDURATIONATFULLSPEEDX_FIELD_NUMBER = 23;
    private float walkStepDurationAtFullSpeedX_;
    /**
     * <code>optional float walkStepDurationAtFullSpeedX = 23;</code>
     */
    public boolean hasWalkStepDurationAtFullSpeedX() {
      return ((bitField0_ & 0x00400000) == 0x00400000);
    }
    /**
     * <code>optional float walkStepDurationAtFullSpeedX = 23;</code>
     */
    public float getWalkStepDurationAtFullSpeedX() {
      return walkStepDurationAtFullSpeedX_;
    }

    // optional float walkStepDurationAtFullSpeedY = 24;
    public static final int WALKSTEPDURATIONATFULLSPEEDY_FIELD_NUMBER = 24;
    private float walkStepDurationAtFullSpeedY_;
    /**
     * <code>optional float walkStepDurationAtFullSpeedY = 24;</code>
     */
    public boolean hasWalkStepDurationAtFullSpeedY() {
      return ((bitField0_ & 0x00800000) == 0x00800000);
    }
    /**
     * <code>optional float walkStepDurationAtFullSpeedY = 24;</code>
     */
    public float getWalkStepDurationAtFullSpeedY() {
      return walkStepDurationAtFullSpeedY_;
    }

    // optional float vectorWalkHeight_x = 25;
    public static final int VECTORWALKHEIGHT_X_FIELD_NUMBER = 25;
    private float vectorWalkHeightX_;
    /**
     * <code>optional float vectorWalkHeight_x = 25;</code>
     */
    public boolean hasVectorWalkHeightX() {
      return ((bitField0_ & 0x01000000) == 0x01000000);
    }
    /**
     * <code>optional float vectorWalkHeight_x = 25;</code>
     */
    public float getVectorWalkHeightX() {
      return vectorWalkHeightX_;
    }

    // optional float vectorWalkHeight_y = 26;
    public static final int VECTORWALKHEIGHT_Y_FIELD_NUMBER = 26;
    private float vectorWalkHeightY_;
    /**
     * <code>optional float vectorWalkHeight_y = 26;</code>
     */
    public boolean hasVectorWalkHeightY() {
      return ((bitField0_ & 0x02000000) == 0x02000000);
    }
    /**
     * <code>optional float vectorWalkHeight_y = 26;</code>
     */
    public float getVectorWalkHeightY() {
      return vectorWalkHeightY_;
    }

    // optional float walkArmRotationAtFullSpeedX = 27;
    public static final int WALKARMROTATIONATFULLSPEEDX_FIELD_NUMBER = 27;
    private float walkArmRotationAtFullSpeedX_;
    /**
     * <code>optional float walkArmRotationAtFullSpeedX = 27;</code>
     */
    public boolean hasWalkArmRotationAtFullSpeedX() {
      return ((bitField0_ & 0x04000000) == 0x04000000);
    }
    /**
     * <code>optional float walkArmRotationAtFullSpeedX = 27;</code>
     */
    public float getWalkArmRotationAtFullSpeedX() {
      return walkArmRotationAtFullSpeedX_;
    }

    // optional float walkMovePhaseBeginning = 28;
    public static final int WALKMOVEPHASEBEGINNING_FIELD_NUMBER = 28;
    private float walkMovePhaseBeginning_;
    /**
     * <code>optional float walkMovePhaseBeginning = 28;</code>
     */
    public boolean hasWalkMovePhaseBeginning() {
      return ((bitField0_ & 0x08000000) == 0x08000000);
    }
    /**
     * <code>optional float walkMovePhaseBeginning = 28;</code>
     */
    public float getWalkMovePhaseBeginning() {
      return walkMovePhaseBeginning_;
    }

    // optional float walkMovePhaseLength = 29;
    public static final int WALKMOVEPHASELENGTH_FIELD_NUMBER = 29;
    private float walkMovePhaseLength_;
    /**
     * <code>optional float walkMovePhaseLength = 29;</code>
     */
    public boolean hasWalkMovePhaseLength() {
      return ((bitField0_ & 0x10000000) == 0x10000000);
    }
    /**
     * <code>optional float walkMovePhaseLength = 29;</code>
     */
    public float getWalkMovePhaseLength() {
      return walkMovePhaseLength_;
    }

    // optional float walkLiftPhaseBeginning = 30;
    public static final int WALKLIFTPHASEBEGINNING_FIELD_NUMBER = 30;
    private float walkLiftPhaseBeginning_;
    /**
     * <code>optional float walkLiftPhaseBeginning = 30;</code>
     */
    public boolean hasWalkLiftPhaseBeginning() {
      return ((bitField0_ & 0x20000000) == 0x20000000);
    }
    /**
     * <code>optional float walkLiftPhaseBeginning = 30;</code>
     */
    public float getWalkLiftPhaseBeginning() {
      return walkLiftPhaseBeginning_;
    }

    // optional float walkLiftPhaseLength = 31;
    public static final int WALKLIFTPHASELENGTH_FIELD_NUMBER = 31;
    private float walkLiftPhaseLength_;
    /**
     * <code>optional float walkLiftPhaseLength = 31;</code>
     */
    public boolean hasWalkLiftPhaseLength() {
      return ((bitField0_ & 0x40000000) == 0x40000000);
    }
    /**
     * <code>optional float walkLiftPhaseLength = 31;</code>
     */
    public float getWalkLiftPhaseLength() {
      return walkLiftPhaseLength_;
    }

    // optional float vectorWalkLiftOffSet_x = 32;
    public static final int VECTORWALKLIFTOFFSET_X_FIELD_NUMBER = 32;
    private float vectorWalkLiftOffSetX_;
    /**
     * <code>optional float vectorWalkLiftOffSet_x = 32;</code>
     */
    public boolean hasVectorWalkLiftOffSetX() {
      return ((bitField0_ & 0x80000000) == 0x80000000);
    }
    /**
     * <code>optional float vectorWalkLiftOffSet_x = 32;</code>
     */
    public float getVectorWalkLiftOffSetX() {
      return vectorWalkLiftOffSetX_;
    }

    // optional float vectorWalkLiftOffSet_y = 33;
    public static final int VECTORWALKLIFTOFFSET_Y_FIELD_NUMBER = 33;
    private float vectorWalkLiftOffSetY_;
    /**
     * <code>optional float vectorWalkLiftOffSet_y = 33;</code>
     */
    public boolean hasVectorWalkLiftOffSetY() {
      return ((bitField1_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional float vectorWalkLiftOffSet_y = 33;</code>
     */
    public float getVectorWalkLiftOffSetY() {
      return vectorWalkLiftOffSetY_;
    }

    // optional float vectorWalkLiftOffSet_z = 34;
    public static final int VECTORWALKLIFTOFFSET_Z_FIELD_NUMBER = 34;
    private float vectorWalkLiftOffSetZ_;
    /**
     * <code>optional float vectorWalkLiftOffSet_z = 34;</code>
     */
    public boolean hasVectorWalkLiftOffSetZ() {
      return ((bitField1_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional float vectorWalkLiftOffSet_z = 34;</code>
     */
    public float getVectorWalkLiftOffSetZ() {
      return vectorWalkLiftOffSetZ_;
    }

    // optional float vectorWalkLiftOffSetAtFullSpeedX_x = 35;
    public static final int VECTORWALKLIFTOFFSETATFULLSPEEDX_X_FIELD_NUMBER = 35;
    private float vectorWalkLiftOffSetAtFullSpeedXX_;
    /**
     * <code>optional float vectorWalkLiftOffSetAtFullSpeedX_x = 35;</code>
     */
    public boolean hasVectorWalkLiftOffSetAtFullSpeedXX() {
      return ((bitField1_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional float vectorWalkLiftOffSetAtFullSpeedX_x = 35;</code>
     */
    public float getVectorWalkLiftOffSetAtFullSpeedXX() {
      return vectorWalkLiftOffSetAtFullSpeedXX_;
    }

    // optional float vectorWalkLiftOffSetAtFullSpeedX_y = 36;
    public static final int VECTORWALKLIFTOFFSETATFULLSPEEDX_Y_FIELD_NUMBER = 36;
    private float vectorWalkLiftOffSetAtFullSpeedXY_;
    /**
     * <code>optional float vectorWalkLiftOffSetAtFullSpeedX_y = 36;</code>
     */
    public boolean hasVectorWalkLiftOffSetAtFullSpeedXY() {
      return ((bitField1_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional float vectorWalkLiftOffSetAtFullSpeedX_y = 36;</code>
     */
    public float getVectorWalkLiftOffSetAtFullSpeedXY() {
      return vectorWalkLiftOffSetAtFullSpeedXY_;
    }

    // optional float vectorWalkLiftOffSetAtFullSpeedX_z = 37;
    public static final int VECTORWALKLIFTOFFSETATFULLSPEEDX_Z_FIELD_NUMBER = 37;
    private float vectorWalkLiftOffSetAtFullSpeedXZ_;
    /**
     * <code>optional float vectorWalkLiftOffSetAtFullSpeedX_z = 37;</code>
     */
    public boolean hasVectorWalkLiftOffSetAtFullSpeedXZ() {
      return ((bitField1_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional float vectorWalkLiftOffSetAtFullSpeedX_z = 37;</code>
     */
    public float getVectorWalkLiftOffSetAtFullSpeedXZ() {
      return vectorWalkLiftOffSetAtFullSpeedXZ_;
    }

    // optional float vectorWalkLiftOffSetAtFullSpeedY_x = 38;
    public static final int VECTORWALKLIFTOFFSETATFULLSPEEDY_X_FIELD_NUMBER = 38;
    private float vectorWalkLiftOffSetAtFullSpeedYX_;
    /**
     * <code>optional float vectorWalkLiftOffSetAtFullSpeedY_x = 38;</code>
     */
    public boolean hasVectorWalkLiftOffSetAtFullSpeedYX() {
      return ((bitField1_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional float vectorWalkLiftOffSetAtFullSpeedY_x = 38;</code>
     */
    public float getVectorWalkLiftOffSetAtFullSpeedYX() {
      return vectorWalkLiftOffSetAtFullSpeedYX_;
    }

    // optional float vectorWalkLiftOffSetAtFullSpeedY_y = 39;
    public static final int VECTORWALKLIFTOFFSETATFULLSPEEDY_Y_FIELD_NUMBER = 39;
    private float vectorWalkLiftOffSetAtFullSpeedYY_;
    /**
     * <code>optional float vectorWalkLiftOffSetAtFullSpeedY_y = 39;</code>
     */
    public boolean hasVectorWalkLiftOffSetAtFullSpeedYY() {
      return ((bitField1_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional float vectorWalkLiftOffSetAtFullSpeedY_y = 39;</code>
     */
    public float getVectorWalkLiftOffSetAtFullSpeedYY() {
      return vectorWalkLiftOffSetAtFullSpeedYY_;
    }

    // optional float vectorWalkLiftOffSetAtFullSpeedY_z = 40;
    public static final int VECTORWALKLIFTOFFSETATFULLSPEEDY_Z_FIELD_NUMBER = 40;
    private float vectorWalkLiftOffSetAtFullSpeedYZ_;
    /**
     * <code>optional float vectorWalkLiftOffSetAtFullSpeedY_z = 40;</code>
     */
    public boolean hasVectorWalkLiftOffSetAtFullSpeedYZ() {
      return ((bitField1_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional float vectorWalkLiftOffSetAtFullSpeedY_z = 40;</code>
     */
    public float getVectorWalkLiftOffSetAtFullSpeedYZ() {
      return vectorWalkLiftOffSetAtFullSpeedYZ_;
    }

    // optional float vectorWalkLiftRotation_x = 41;
    public static final int VECTORWALKLIFTROTATION_X_FIELD_NUMBER = 41;
    private float vectorWalkLiftRotationX_;
    /**
     * <code>optional float vectorWalkLiftRotation_x = 41;</code>
     */
    public boolean hasVectorWalkLiftRotationX() {
      return ((bitField1_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional float vectorWalkLiftRotation_x = 41;</code>
     */
    public float getVectorWalkLiftRotationX() {
      return vectorWalkLiftRotationX_;
    }

    // optional float vectorWalkLiftRotation_y = 42;
    public static final int VECTORWALKLIFTROTATION_Y_FIELD_NUMBER = 42;
    private float vectorWalkLiftRotationY_;
    /**
     * <code>optional float vectorWalkLiftRotation_y = 42;</code>
     */
    public boolean hasVectorWalkLiftRotationY() {
      return ((bitField1_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional float vectorWalkLiftRotation_y = 42;</code>
     */
    public float getVectorWalkLiftRotationY() {
      return vectorWalkLiftRotationY_;
    }

    // optional float vectorWalkLiftRotation_z = 43;
    public static final int VECTORWALKLIFTROTATION_Z_FIELD_NUMBER = 43;
    private float vectorWalkLiftRotationZ_;
    /**
     * <code>optional float vectorWalkLiftRotation_z = 43;</code>
     */
    public boolean hasVectorWalkLiftRotationZ() {
      return ((bitField1_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional float vectorWalkLiftRotation_z = 43;</code>
     */
    public float getVectorWalkLiftRotationZ() {
      return vectorWalkLiftRotationZ_;
    }

    // optional float walkSupportRotation = 44;
    public static final int WALKSUPPORTROTATION_FIELD_NUMBER = 44;
    private float walkSupportRotation_;
    /**
     * <code>optional float walkSupportRotation = 44;</code>
     */
    public boolean hasWalkSupportRotation() {
      return ((bitField1_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional float walkSupportRotation = 44;</code>
     */
    public float getWalkSupportRotation() {
      return walkSupportRotation_;
    }

    // optional float walkComLiftOffSet_x = 45;
    public static final int WALKCOMLIFTOFFSET_X_FIELD_NUMBER = 45;
    private float walkComLiftOffSetX_;
    /**
     * <code>optional float walkComLiftOffSet_x = 45;</code>
     */
    public boolean hasWalkComLiftOffSetX() {
      return ((bitField1_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>optional float walkComLiftOffSet_x = 45;</code>
     */
    public float getWalkComLiftOffSetX() {
      return walkComLiftOffSetX_;
    }

    // optional float walkComLiftOffSet_y = 46;
    public static final int WALKCOMLIFTOFFSET_Y_FIELD_NUMBER = 46;
    private float walkComLiftOffSetY_;
    /**
     * <code>optional float walkComLiftOffSet_y = 46;</code>
     */
    public boolean hasWalkComLiftOffSetY() {
      return ((bitField1_ & 0x00002000) == 0x00002000);
    }
    /**
     * <code>optional float walkComLiftOffSet_y = 46;</code>
     */
    public float getWalkComLiftOffSetY() {
      return walkComLiftOffSetY_;
    }

    // optional float walkComLiftOffSet_z = 47;
    public static final int WALKCOMLIFTOFFSET_Z_FIELD_NUMBER = 47;
    private float walkComLiftOffSetZ_;
    /**
     * <code>optional float walkComLiftOffSet_z = 47;</code>
     */
    public boolean hasWalkComLiftOffSetZ() {
      return ((bitField1_ & 0x00004000) == 0x00004000);
    }
    /**
     * <code>optional float walkComLiftOffSet_z = 47;</code>
     */
    public float getWalkComLiftOffSetZ() {
      return walkComLiftOffSetZ_;
    }

    // optional float walkComBodyRotation = 48;
    public static final int WALKCOMBODYROTATION_FIELD_NUMBER = 48;
    private float walkComBodyRotation_;
    /**
     * <code>optional float walkComBodyRotation = 48;</code>
     */
    public boolean hasWalkComBodyRotation() {
      return ((bitField1_ & 0x00008000) == 0x00008000);
    }
    /**
     * <code>optional float walkComBodyRotation = 48;</code>
     */
    public float getWalkComBodyRotation() {
      return walkComBodyRotation_;
    }

    // optional float speedMax_rot = 49;
    public static final int SPEEDMAX_ROT_FIELD_NUMBER = 49;
    private float speedMaxRot_;
    /**
     * <code>optional float speedMax_rot = 49;</code>
     */
    public boolean hasSpeedMaxRot() {
      return ((bitField1_ & 0x00010000) == 0x00010000);
    }
    /**
     * <code>optional float speedMax_rot = 49;</code>
     */
    public float getSpeedMaxRot() {
      return speedMaxRot_;
    }

    // optional float speedMax_Vector_x = 50;
    public static final int SPEEDMAX_VECTOR_X_FIELD_NUMBER = 50;
    private float speedMaxVectorX_;
    /**
     * <code>optional float speedMax_Vector_x = 50;</code>
     */
    public boolean hasSpeedMaxVectorX() {
      return ((bitField1_ & 0x00020000) == 0x00020000);
    }
    /**
     * <code>optional float speedMax_Vector_x = 50;</code>
     */
    public float getSpeedMaxVectorX() {
      return speedMaxVectorX_;
    }

    // optional float speedMax_Vector_y = 51;
    public static final int SPEEDMAX_VECTOR_Y_FIELD_NUMBER = 51;
    private float speedMaxVectorY_;
    /**
     * <code>optional float speedMax_Vector_y = 51;</code>
     */
    public boolean hasSpeedMaxVectorY() {
      return ((bitField1_ & 0x00040000) == 0x00040000);
    }
    /**
     * <code>optional float speedMax_Vector_y = 51;</code>
     */
    public float getSpeedMaxVectorY() {
      return speedMaxVectorY_;
    }

    // optional float speedMaxBackwards = 52;
    public static final int SPEEDMAXBACKWARDS_FIELD_NUMBER = 52;
    private float speedMaxBackwards_;
    /**
     * <code>optional float speedMaxBackwards = 52;</code>
     */
    public boolean hasSpeedMaxBackwards() {
      return ((bitField1_ & 0x00080000) == 0x00080000);
    }
    /**
     * <code>optional float speedMaxBackwards = 52;</code>
     */
    public float getSpeedMaxBackwards() {
      return speedMaxBackwards_;
    }

    // optional float speedMaxChange_rot = 53;
    public static final int SPEEDMAXCHANGE_ROT_FIELD_NUMBER = 53;
    private float speedMaxChangeRot_;
    /**
     * <code>optional float speedMaxChange_rot = 53;</code>
     */
    public boolean hasSpeedMaxChangeRot() {
      return ((bitField1_ & 0x00100000) == 0x00100000);
    }
    /**
     * <code>optional float speedMaxChange_rot = 53;</code>
     */
    public float getSpeedMaxChangeRot() {
      return speedMaxChangeRot_;
    }

    // optional float speedMaxChange_Vector_x = 54;
    public static final int SPEEDMAXCHANGE_VECTOR_X_FIELD_NUMBER = 54;
    private float speedMaxChangeVectorX_;
    /**
     * <code>optional float speedMaxChange_Vector_x = 54;</code>
     */
    public boolean hasSpeedMaxChangeVectorX() {
      return ((bitField1_ & 0x00200000) == 0x00200000);
    }
    /**
     * <code>optional float speedMaxChange_Vector_x = 54;</code>
     */
    public float getSpeedMaxChangeVectorX() {
      return speedMaxChangeVectorX_;
    }

    // optional float speedMaxChange_Vector_y = 55;
    public static final int SPEEDMAXCHANGE_VECTOR_Y_FIELD_NUMBER = 55;
    private float speedMaxChangeVectorY_;
    /**
     * <code>optional float speedMaxChange_Vector_y = 55;</code>
     */
    public boolean hasSpeedMaxChangeVectorY() {
      return ((bitField1_ & 0x00400000) == 0x00400000);
    }
    /**
     * <code>optional float speedMaxChange_Vector_y = 55;</code>
     */
    public float getSpeedMaxChangeVectorY() {
      return speedMaxChangeVectorY_;
    }

    // optional bool balance = 56;
    public static final int BALANCE_FIELD_NUMBER = 56;
    private boolean balance_;
    /**
     * <code>optional bool balance = 56;</code>
     */
    public boolean hasBalance() {
      return ((bitField1_ & 0x00800000) == 0x00800000);
    }
    /**
     * <code>optional bool balance = 56;</code>
     */
    public boolean getBalance() {
      return balance_;
    }

    // optional float vectorBalanceBodyRotation_x = 57;
    public static final int VECTORBALANCEBODYROTATION_X_FIELD_NUMBER = 57;
    private float vectorBalanceBodyRotationX_;
    /**
     * <code>optional float vectorBalanceBodyRotation_x = 57;</code>
     */
    public boolean hasVectorBalanceBodyRotationX() {
      return ((bitField1_ & 0x01000000) == 0x01000000);
    }
    /**
     * <code>optional float vectorBalanceBodyRotation_x = 57;</code>
     */
    public float getVectorBalanceBodyRotationX() {
      return vectorBalanceBodyRotationX_;
    }

    // optional float vectorBalanceBodyRotation_y = 58;
    public static final int VECTORBALANCEBODYROTATION_Y_FIELD_NUMBER = 58;
    private float vectorBalanceBodyRotationY_;
    /**
     * <code>optional float vectorBalanceBodyRotation_y = 58;</code>
     */
    public boolean hasVectorBalanceBodyRotationY() {
      return ((bitField1_ & 0x02000000) == 0x02000000);
    }
    /**
     * <code>optional float vectorBalanceBodyRotation_y = 58;</code>
     */
    public float getVectorBalanceBodyRotationY() {
      return vectorBalanceBodyRotationY_;
    }

    // optional float vectorBalanceCom_x = 59;
    public static final int VECTORBALANCECOM_X_FIELD_NUMBER = 59;
    private float vectorBalanceComX_;
    /**
     * <code>optional float vectorBalanceCom_x = 59;</code>
     */
    public boolean hasVectorBalanceComX() {
      return ((bitField1_ & 0x04000000) == 0x04000000);
    }
    /**
     * <code>optional float vectorBalanceCom_x = 59;</code>
     */
    public float getVectorBalanceComX() {
      return vectorBalanceComX_;
    }

    // optional float vectorBalanceCom_y = 60;
    public static final int VECTORBALANCECOM_Y_FIELD_NUMBER = 60;
    private float vectorBalanceComY_;
    /**
     * <code>optional float vectorBalanceCom_y = 60;</code>
     */
    public boolean hasVectorBalanceComY() {
      return ((bitField1_ & 0x08000000) == 0x08000000);
    }
    /**
     * <code>optional float vectorBalanceCom_y = 60;</code>
     */
    public float getVectorBalanceComY() {
      return vectorBalanceComY_;
    }

    // optional float vectorBalanceComVelocity_x = 61;
    public static final int VECTORBALANCECOMVELOCITY_X_FIELD_NUMBER = 61;
    private float vectorBalanceComVelocityX_;
    /**
     * <code>optional float vectorBalanceComVelocity_x = 61;</code>
     */
    public boolean hasVectorBalanceComVelocityX() {
      return ((bitField1_ & 0x10000000) == 0x10000000);
    }
    /**
     * <code>optional float vectorBalanceComVelocity_x = 61;</code>
     */
    public float getVectorBalanceComVelocityX() {
      return vectorBalanceComVelocityX_;
    }

    // optional float vectorBalanceComVelocity_y = 62;
    public static final int VECTORBALANCECOMVELOCITY_Y_FIELD_NUMBER = 62;
    private float vectorBalanceComVelocityY_;
    /**
     * <code>optional float vectorBalanceComVelocity_y = 62;</code>
     */
    public boolean hasVectorBalanceComVelocityY() {
      return ((bitField1_ & 0x20000000) == 0x20000000);
    }
    /**
     * <code>optional float vectorBalanceComVelocity_y = 62;</code>
     */
    public float getVectorBalanceComVelocityY() {
      return vectorBalanceComVelocityY_;
    }

    // optional float vectorBalanceRef_x = 63;
    public static final int VECTORBALANCEREF_X_FIELD_NUMBER = 63;
    private float vectorBalanceRefX_;
    /**
     * <code>optional float vectorBalanceRef_x = 63;</code>
     */
    public boolean hasVectorBalanceRefX() {
      return ((bitField1_ & 0x40000000) == 0x40000000);
    }
    /**
     * <code>optional float vectorBalanceRef_x = 63;</code>
     */
    public float getVectorBalanceRefX() {
      return vectorBalanceRefX_;
    }

    // optional float vectorBalanceRef_y = 64;
    public static final int VECTORBALANCEREF_Y_FIELD_NUMBER = 64;
    private float vectorBalanceRefY_;
    /**
     * <code>optional float vectorBalanceRef_y = 64;</code>
     */
    public boolean hasVectorBalanceRefY() {
      return ((bitField1_ & 0x80000000) == 0x80000000);
    }
    /**
     * <code>optional float vectorBalanceRef_y = 64;</code>
     */
    public float getVectorBalanceRefY() {
      return vectorBalanceRefY_;
    }

    // optional float vectorBalanceNextRef_x = 65;
    public static final int VECTORBALANCENEXTREF_X_FIELD_NUMBER = 65;
    private float vectorBalanceNextRefX_;
    /**
     * <code>optional float vectorBalanceNextRef_x = 65;</code>
     */
    public boolean hasVectorBalanceNextRefX() {
      return ((bitField2_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional float vectorBalanceNextRef_x = 65;</code>
     */
    public float getVectorBalanceNextRefX() {
      return vectorBalanceNextRefX_;
    }

    // optional float vectorBalanceNextRef_y = 66;
    public static final int VECTORBALANCENEXTREF_Y_FIELD_NUMBER = 66;
    private float vectorBalanceNextRefY_;
    /**
     * <code>optional float vectorBalanceNextRef_y = 66;</code>
     */
    public boolean hasVectorBalanceNextRefY() {
      return ((bitField2_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional float vectorBalanceNextRef_y = 66;</code>
     */
    public float getVectorBalanceNextRefY() {
      return vectorBalanceNextRefY_;
    }

    // optional float vectorBalanceStepSize_x = 67;
    public static final int VECTORBALANCESTEPSIZE_X_FIELD_NUMBER = 67;
    private float vectorBalanceStepSizeX_;
    /**
     * <code>optional float vectorBalanceStepSize_x = 67;</code>
     */
    public boolean hasVectorBalanceStepSizeX() {
      return ((bitField2_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional float vectorBalanceStepSize_x = 67;</code>
     */
    public float getVectorBalanceStepSizeX() {
      return vectorBalanceStepSizeX_;
    }

    // optional float vectorBalanceStepSize_y = 68;
    public static final int VECTORBALANCESTEPSIZE_Y_FIELD_NUMBER = 68;
    private float vectorBalanceStepSizeY_;
    /**
     * <code>optional float vectorBalanceStepSize_y = 68;</code>
     */
    public boolean hasVectorBalanceStepSizeY() {
      return ((bitField2_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional float vectorBalanceStepSize_y = 68;</code>
     */
    public float getVectorBalanceStepSizeY() {
      return vectorBalanceStepSizeY_;
    }

    // optional float observerMeasurementDelay = 69;
    public static final int OBSERVERMEASUREMENTDELAY_FIELD_NUMBER = 69;
    private float observerMeasurementDelay_;
    /**
     * <code>optional float observerMeasurementDelay = 69;</code>
     */
    public boolean hasObserverMeasurementDelay() {
      return ((bitField2_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional float observerMeasurementDelay = 69;</code>
     */
    public float getObserverMeasurementDelay() {
      return observerMeasurementDelay_;
    }

    // optional float vectorObserverMeasurementDeviation_x = 70;
    public static final int VECTOROBSERVERMEASUREMENTDEVIATION_X_FIELD_NUMBER = 70;
    private float vectorObserverMeasurementDeviationX_;
    /**
     * <code>optional float vectorObserverMeasurementDeviation_x = 70;</code>
     */
    public boolean hasVectorObserverMeasurementDeviationX() {
      return ((bitField2_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional float vectorObserverMeasurementDeviation_x = 70;</code>
     */
    public float getVectorObserverMeasurementDeviationX() {
      return vectorObserverMeasurementDeviationX_;
    }

    // optional float vectorObserverMeasurementDeviation_y = 71;
    public static final int VECTOROBSERVERMEASUREMENTDEVIATION_Y_FIELD_NUMBER = 71;
    private float vectorObserverMeasurementDeviationY_;
    /**
     * <code>optional float vectorObserverMeasurementDeviation_y = 71;</code>
     */
    public boolean hasVectorObserverMeasurementDeviationY() {
      return ((bitField2_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional float vectorObserverMeasurementDeviation_y = 71;</code>
     */
    public float getVectorObserverMeasurementDeviationY() {
      return vectorObserverMeasurementDeviationY_;
    }

    // optional float vectorObserverProcessDeviation_x = 72;
    public static final int VECTOROBSERVERPROCESSDEVIATION_X_FIELD_NUMBER = 72;
    private float vectorObserverProcessDeviationX_;
    /**
     * <code>optional float vectorObserverProcessDeviation_x = 72;</code>
     */
    public boolean hasVectorObserverProcessDeviationX() {
      return ((bitField2_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional float vectorObserverProcessDeviation_x = 72;</code>
     */
    public float getVectorObserverProcessDeviationX() {
      return vectorObserverProcessDeviationX_;
    }

    // optional float vectorObserverProcessDeviation_y = 73;
    public static final int VECTOROBSERVERPROCESSDEVIATION_Y_FIELD_NUMBER = 73;
    private float vectorObserverProcessDeviationY_;
    /**
     * <code>optional float vectorObserverProcessDeviation_y = 73;</code>
     */
    public boolean hasVectorObserverProcessDeviationY() {
      return ((bitField2_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional float vectorObserverProcessDeviation_y = 73;</code>
     */
    public float getVectorObserverProcessDeviationY() {
      return vectorObserverProcessDeviationY_;
    }

    // optional float vectorObserverProcessDeviation_z = 74;
    public static final int VECTOROBSERVERPROCESSDEVIATION_Z_FIELD_NUMBER = 74;
    private float vectorObserverProcessDeviationZ_;
    /**
     * <code>optional float vectorObserverProcessDeviation_z = 74;</code>
     */
    public boolean hasVectorObserverProcessDeviationZ() {
      return ((bitField2_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional float vectorObserverProcessDeviation_z = 74;</code>
     */
    public float getVectorObserverProcessDeviationZ() {
      return vectorObserverProcessDeviationZ_;
    }

    // optional float vectorObserverProcessDeviation_w = 75;
    public static final int VECTOROBSERVERPROCESSDEVIATION_W_FIELD_NUMBER = 75;
    private float vectorObserverProcessDeviationW_;
    /**
     * <code>optional float vectorObserverProcessDeviation_w = 75;</code>
     */
    public boolean hasVectorObserverProcessDeviationW() {
      return ((bitField2_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional float vectorObserverProcessDeviation_w = 75;</code>
     */
    public float getVectorObserverProcessDeviationW() {
      return vectorObserverProcessDeviationW_;
    }

    // optional float odometryScale_rot = 76;
    public static final int ODOMETRYSCALE_ROT_FIELD_NUMBER = 76;
    private float odometryScaleRot_;
    /**
     * <code>optional float odometryScale_rot = 76;</code>
     */
    public boolean hasOdometryScaleRot() {
      return ((bitField2_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional float odometryScale_rot = 76;</code>
     */
    public float getOdometryScaleRot() {
      return odometryScaleRot_;
    }

    // optional float odometryScale_Vector_x = 77;
    public static final int ODOMETRYSCALE_VECTOR_X_FIELD_NUMBER = 77;
    private float odometryScaleVectorX_;
    /**
     * <code>optional float odometryScale_Vector_x = 77;</code>
     */
    public boolean hasOdometryScaleVectorX() {
      return ((bitField2_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>optional float odometryScale_Vector_x = 77;</code>
     */
    public float getOdometryScaleVectorX() {
      return odometryScaleVectorX_;
    }

    // optional float odometryScale_Vector_y = 78;
    public static final int ODOMETRYSCALE_VECTOR_Y_FIELD_NUMBER = 78;
    private float odometryScaleVectorY_;
    /**
     * <code>optional float odometryScale_Vector_y = 78;</code>
     */
    public boolean hasOdometryScaleVectorY() {
      return ((bitField2_ & 0x00002000) == 0x00002000);
    }
    /**
     * <code>optional float odometryScale_Vector_y = 78;</code>
     */
    public float getOdometryScaleVectorY() {
      return odometryScaleVectorY_;
    }

    // optional float gyroStateGain = 79;
    public static final int GYROSTATEGAIN_FIELD_NUMBER = 79;
    private float gyroStateGain_;
    /**
     * <code>optional float gyroStateGain = 79;</code>
     */
    public boolean hasGyroStateGain() {
      return ((bitField2_ & 0x00004000) == 0x00004000);
    }
    /**
     * <code>optional float gyroStateGain = 79;</code>
     */
    public float getGyroStateGain() {
      return gyroStateGain_;
    }

    // optional float gyroDerivativeGain = 80;
    public static final int GYRODERIVATIVEGAIN_FIELD_NUMBER = 80;
    private float gyroDerivativeGain_;
    /**
     * <code>optional float gyroDerivativeGain = 80;</code>
     */
    public boolean hasGyroDerivativeGain() {
      return ((bitField2_ & 0x00008000) == 0x00008000);
    }
    /**
     * <code>optional float gyroDerivativeGain = 80;</code>
     */
    public float getGyroDerivativeGain() {
      return gyroDerivativeGain_;
    }

    // optional float gyroSmoothing = 81;
    public static final int GYROSMOOTHING_FIELD_NUMBER = 81;
    private float gyroSmoothing_;
    /**
     * <code>optional float gyroSmoothing = 81;</code>
     */
    public boolean hasGyroSmoothing() {
      return ((bitField2_ & 0x00010000) == 0x00010000);
    }
    /**
     * <code>optional float gyroSmoothing = 81;</code>
     */
    public float getGyroSmoothing() {
      return gyroSmoothing_;
    }

    // optional float minRotationToReduceStepSize = 82;
    public static final int MINROTATIONTOREDUCESTEPSIZE_FIELD_NUMBER = 82;
    private float minRotationToReduceStepSize_;
    /**
     * <code>optional float minRotationToReduceStepSize = 82;</code>
     */
    public boolean hasMinRotationToReduceStepSize() {
      return ((bitField2_ & 0x00020000) == 0x00020000);
    }
    /**
     * <code>optional float minRotationToReduceStepSize = 82;</code>
     */
    public float getMinRotationToReduceStepSize() {
      return minRotationToReduceStepSize_;
    }

    private void initFields() {
      vectorStandComPosY_ = 0F;
      vectorStandComPosZ_ = 0F;
      standBodyTilt_ = 0F;
      vectorStandArmJointAngleX_ = 0F;
      vectorStandArmJointAngleY_ = 0F;
      standHardnessAnklePitch_ = 0L;
      standHardnessAnkleRoll_ = 0L;
      vectorWalkRefX_ = 0F;
      vectorWalkRefY_ = 0F;
      vectorWalkRefAtFullSpeedX_ = 0F;
      vectorWalkRefAtFullSpeedY_ = 0F;
      rangeWalkRefPlanningLimitLow_ = 0F;
      rangeWalkRefPlanningLimitHigh_ = 0F;
      rangeWalkRefXLimitLow_ = 0F;
      rangeWalkRefXLimitHigh_ = 0F;
      rangeWalkRefYLimitLow_ = 0F;
      rangeWalkRefYLimitHigh_ = 0F;
      rangeWalkStepSizeXPlanningLimitLow_ = 0F;
      rangeWalkStepSizeXPlanningLimitHigh_ = 0F;
      rangeWalkStepSizeXLimitLow_ = 0F;
      rangeWalkStepSizeXLimitHigh_ = 0F;
      walkStepDuration_ = 0F;
      walkStepDurationAtFullSpeedX_ = 0F;
      walkStepDurationAtFullSpeedY_ = 0F;
      vectorWalkHeightX_ = 0F;
      vectorWalkHeightY_ = 0F;
      walkArmRotationAtFullSpeedX_ = 0F;
      walkMovePhaseBeginning_ = 0F;
      walkMovePhaseLength_ = 0F;
      walkLiftPhaseBeginning_ = 0F;
      walkLiftPhaseLength_ = 0F;
      vectorWalkLiftOffSetX_ = 0F;
      vectorWalkLiftOffSetY_ = 0F;
      vectorWalkLiftOffSetZ_ = 0F;
      vectorWalkLiftOffSetAtFullSpeedXX_ = 0F;
      vectorWalkLiftOffSetAtFullSpeedXY_ = 0F;
      vectorWalkLiftOffSetAtFullSpeedXZ_ = 0F;
      vectorWalkLiftOffSetAtFullSpeedYX_ = 0F;
      vectorWalkLiftOffSetAtFullSpeedYY_ = 0F;
      vectorWalkLiftOffSetAtFullSpeedYZ_ = 0F;
      vectorWalkLiftRotationX_ = 0F;
      vectorWalkLiftRotationY_ = 0F;
      vectorWalkLiftRotationZ_ = 0F;
      walkSupportRotation_ = 0F;
      walkComLiftOffSetX_ = 0F;
      walkComLiftOffSetY_ = 0F;
      walkComLiftOffSetZ_ = 0F;
      walkComBodyRotation_ = 0F;
      speedMaxRot_ = 0F;
      speedMaxVectorX_ = 0F;
      speedMaxVectorY_ = 0F;
      speedMaxBackwards_ = 0F;
      speedMaxChangeRot_ = 0F;
      speedMaxChangeVectorX_ = 0F;
      speedMaxChangeVectorY_ = 0F;
      balance_ = false;
      vectorBalanceBodyRotationX_ = 0F;
      vectorBalanceBodyRotationY_ = 0F;
      vectorBalanceComX_ = 0F;
      vectorBalanceComY_ = 0F;
      vectorBalanceComVelocityX_ = 0F;
      vectorBalanceComVelocityY_ = 0F;
      vectorBalanceRefX_ = 0F;
      vectorBalanceRefY_ = 0F;
      vectorBalanceNextRefX_ = 0F;
      vectorBalanceNextRefY_ = 0F;
      vectorBalanceStepSizeX_ = 0F;
      vectorBalanceStepSizeY_ = 0F;
      observerMeasurementDelay_ = 0F;
      vectorObserverMeasurementDeviationX_ = 0F;
      vectorObserverMeasurementDeviationY_ = 0F;
      vectorObserverProcessDeviationX_ = 0F;
      vectorObserverProcessDeviationY_ = 0F;
      vectorObserverProcessDeviationZ_ = 0F;
      vectorObserverProcessDeviationW_ = 0F;
      odometryScaleRot_ = 0F;
      odometryScaleVectorX_ = 0F;
      odometryScaleVectorY_ = 0F;
      gyroStateGain_ = 0F;
      gyroDerivativeGain_ = 0F;
      gyroSmoothing_ = 0F;
      minRotationToReduceStepSize_ = 0F;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeFloat(1, vectorStandComPosY_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeFloat(2, vectorStandComPosZ_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeFloat(3, standBodyTilt_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeFloat(4, vectorStandArmJointAngleX_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeFloat(5, vectorStandArmJointAngleY_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt64(6, standHardnessAnklePitch_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeInt64(7, standHardnessAnkleRoll_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeFloat(8, vectorWalkRefX_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeFloat(9, vectorWalkRefY_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeFloat(10, vectorWalkRefAtFullSpeedX_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeFloat(11, vectorWalkRefAtFullSpeedY_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeFloat(12, rangeWalkRefPlanningLimitLow_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeFloat(13, rangeWalkRefPlanningLimitHigh_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        output.writeFloat(14, rangeWalkRefXLimitLow_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        output.writeFloat(15, rangeWalkRefXLimitHigh_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        output.writeFloat(16, rangeWalkRefYLimitLow_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        output.writeFloat(17, rangeWalkRefYLimitHigh_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        output.writeFloat(18, rangeWalkStepSizeXPlanningLimitLow_);
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        output.writeFloat(19, rangeWalkStepSizeXPlanningLimitHigh_);
      }
      if (((bitField0_ & 0x00080000) == 0x00080000)) {
        output.writeFloat(20, rangeWalkStepSizeXLimitLow_);
      }
      if (((bitField0_ & 0x00100000) == 0x00100000)) {
        output.writeFloat(21, rangeWalkStepSizeXLimitHigh_);
      }
      if (((bitField0_ & 0x00200000) == 0x00200000)) {
        output.writeFloat(22, walkStepDuration_);
      }
      if (((bitField0_ & 0x00400000) == 0x00400000)) {
        output.writeFloat(23, walkStepDurationAtFullSpeedX_);
      }
      if (((bitField0_ & 0x00800000) == 0x00800000)) {
        output.writeFloat(24, walkStepDurationAtFullSpeedY_);
      }
      if (((bitField0_ & 0x01000000) == 0x01000000)) {
        output.writeFloat(25, vectorWalkHeightX_);
      }
      if (((bitField0_ & 0x02000000) == 0x02000000)) {
        output.writeFloat(26, vectorWalkHeightY_);
      }
      if (((bitField0_ & 0x04000000) == 0x04000000)) {
        output.writeFloat(27, walkArmRotationAtFullSpeedX_);
      }
      if (((bitField0_ & 0x08000000) == 0x08000000)) {
        output.writeFloat(28, walkMovePhaseBeginning_);
      }
      if (((bitField0_ & 0x10000000) == 0x10000000)) {
        output.writeFloat(29, walkMovePhaseLength_);
      }
      if (((bitField0_ & 0x20000000) == 0x20000000)) {
        output.writeFloat(30, walkLiftPhaseBeginning_);
      }
      if (((bitField0_ & 0x40000000) == 0x40000000)) {
        output.writeFloat(31, walkLiftPhaseLength_);
      }
      if (((bitField0_ & 0x80000000) == 0x80000000)) {
        output.writeFloat(32, vectorWalkLiftOffSetX_);
      }
      if (((bitField1_ & 0x00000001) == 0x00000001)) {
        output.writeFloat(33, vectorWalkLiftOffSetY_);
      }
      if (((bitField1_ & 0x00000002) == 0x00000002)) {
        output.writeFloat(34, vectorWalkLiftOffSetZ_);
      }
      if (((bitField1_ & 0x00000004) == 0x00000004)) {
        output.writeFloat(35, vectorWalkLiftOffSetAtFullSpeedXX_);
      }
      if (((bitField1_ & 0x00000008) == 0x00000008)) {
        output.writeFloat(36, vectorWalkLiftOffSetAtFullSpeedXY_);
      }
      if (((bitField1_ & 0x00000010) == 0x00000010)) {
        output.writeFloat(37, vectorWalkLiftOffSetAtFullSpeedXZ_);
      }
      if (((bitField1_ & 0x00000020) == 0x00000020)) {
        output.writeFloat(38, vectorWalkLiftOffSetAtFullSpeedYX_);
      }
      if (((bitField1_ & 0x00000040) == 0x00000040)) {
        output.writeFloat(39, vectorWalkLiftOffSetAtFullSpeedYY_);
      }
      if (((bitField1_ & 0x00000080) == 0x00000080)) {
        output.writeFloat(40, vectorWalkLiftOffSetAtFullSpeedYZ_);
      }
      if (((bitField1_ & 0x00000100) == 0x00000100)) {
        output.writeFloat(41, vectorWalkLiftRotationX_);
      }
      if (((bitField1_ & 0x00000200) == 0x00000200)) {
        output.writeFloat(42, vectorWalkLiftRotationY_);
      }
      if (((bitField1_ & 0x00000400) == 0x00000400)) {
        output.writeFloat(43, vectorWalkLiftRotationZ_);
      }
      if (((bitField1_ & 0x00000800) == 0x00000800)) {
        output.writeFloat(44, walkSupportRotation_);
      }
      if (((bitField1_ & 0x00001000) == 0x00001000)) {
        output.writeFloat(45, walkComLiftOffSetX_);
      }
      if (((bitField1_ & 0x00002000) == 0x00002000)) {
        output.writeFloat(46, walkComLiftOffSetY_);
      }
      if (((bitField1_ & 0x00004000) == 0x00004000)) {
        output.writeFloat(47, walkComLiftOffSetZ_);
      }
      if (((bitField1_ & 0x00008000) == 0x00008000)) {
        output.writeFloat(48, walkComBodyRotation_);
      }
      if (((bitField1_ & 0x00010000) == 0x00010000)) {
        output.writeFloat(49, speedMaxRot_);
      }
      if (((bitField1_ & 0x00020000) == 0x00020000)) {
        output.writeFloat(50, speedMaxVectorX_);
      }
      if (((bitField1_ & 0x00040000) == 0x00040000)) {
        output.writeFloat(51, speedMaxVectorY_);
      }
      if (((bitField1_ & 0x00080000) == 0x00080000)) {
        output.writeFloat(52, speedMaxBackwards_);
      }
      if (((bitField1_ & 0x00100000) == 0x00100000)) {
        output.writeFloat(53, speedMaxChangeRot_);
      }
      if (((bitField1_ & 0x00200000) == 0x00200000)) {
        output.writeFloat(54, speedMaxChangeVectorX_);
      }
      if (((bitField1_ & 0x00400000) == 0x00400000)) {
        output.writeFloat(55, speedMaxChangeVectorY_);
      }
      if (((bitField1_ & 0x00800000) == 0x00800000)) {
        output.writeBool(56, balance_);
      }
      if (((bitField1_ & 0x01000000) == 0x01000000)) {
        output.writeFloat(57, vectorBalanceBodyRotationX_);
      }
      if (((bitField1_ & 0x02000000) == 0x02000000)) {
        output.writeFloat(58, vectorBalanceBodyRotationY_);
      }
      if (((bitField1_ & 0x04000000) == 0x04000000)) {
        output.writeFloat(59, vectorBalanceComX_);
      }
      if (((bitField1_ & 0x08000000) == 0x08000000)) {
        output.writeFloat(60, vectorBalanceComY_);
      }
      if (((bitField1_ & 0x10000000) == 0x10000000)) {
        output.writeFloat(61, vectorBalanceComVelocityX_);
      }
      if (((bitField1_ & 0x20000000) == 0x20000000)) {
        output.writeFloat(62, vectorBalanceComVelocityY_);
      }
      if (((bitField1_ & 0x40000000) == 0x40000000)) {
        output.writeFloat(63, vectorBalanceRefX_);
      }
      if (((bitField1_ & 0x80000000) == 0x80000000)) {
        output.writeFloat(64, vectorBalanceRefY_);
      }
      if (((bitField2_ & 0x00000001) == 0x00000001)) {
        output.writeFloat(65, vectorBalanceNextRefX_);
      }
      if (((bitField2_ & 0x00000002) == 0x00000002)) {
        output.writeFloat(66, vectorBalanceNextRefY_);
      }
      if (((bitField2_ & 0x00000004) == 0x00000004)) {
        output.writeFloat(67, vectorBalanceStepSizeX_);
      }
      if (((bitField2_ & 0x00000008) == 0x00000008)) {
        output.writeFloat(68, vectorBalanceStepSizeY_);
      }
      if (((bitField2_ & 0x00000010) == 0x00000010)) {
        output.writeFloat(69, observerMeasurementDelay_);
      }
      if (((bitField2_ & 0x00000020) == 0x00000020)) {
        output.writeFloat(70, vectorObserverMeasurementDeviationX_);
      }
      if (((bitField2_ & 0x00000040) == 0x00000040)) {
        output.writeFloat(71, vectorObserverMeasurementDeviationY_);
      }
      if (((bitField2_ & 0x00000080) == 0x00000080)) {
        output.writeFloat(72, vectorObserverProcessDeviationX_);
      }
      if (((bitField2_ & 0x00000100) == 0x00000100)) {
        output.writeFloat(73, vectorObserverProcessDeviationY_);
      }
      if (((bitField2_ & 0x00000200) == 0x00000200)) {
        output.writeFloat(74, vectorObserverProcessDeviationZ_);
      }
      if (((bitField2_ & 0x00000400) == 0x00000400)) {
        output.writeFloat(75, vectorObserverProcessDeviationW_);
      }
      if (((bitField2_ & 0x00000800) == 0x00000800)) {
        output.writeFloat(76, odometryScaleRot_);
      }
      if (((bitField2_ & 0x00001000) == 0x00001000)) {
        output.writeFloat(77, odometryScaleVectorX_);
      }
      if (((bitField2_ & 0x00002000) == 0x00002000)) {
        output.writeFloat(78, odometryScaleVectorY_);
      }
      if (((bitField2_ & 0x00004000) == 0x00004000)) {
        output.writeFloat(79, gyroStateGain_);
      }
      if (((bitField2_ & 0x00008000) == 0x00008000)) {
        output.writeFloat(80, gyroDerivativeGain_);
      }
      if (((bitField2_ & 0x00010000) == 0x00010000)) {
        output.writeFloat(81, gyroSmoothing_);
      }
      if (((bitField2_ & 0x00020000) == 0x00020000)) {
        output.writeFloat(82, minRotationToReduceStepSize_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(1, vectorStandComPosY_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(2, vectorStandComPosZ_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(3, standBodyTilt_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(4, vectorStandArmJointAngleX_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(5, vectorStandArmJointAngleY_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(6, standHardnessAnklePitch_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(7, standHardnessAnkleRoll_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(8, vectorWalkRefX_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(9, vectorWalkRefY_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(10, vectorWalkRefAtFullSpeedX_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(11, vectorWalkRefAtFullSpeedY_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(12, rangeWalkRefPlanningLimitLow_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(13, rangeWalkRefPlanningLimitHigh_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(14, rangeWalkRefXLimitLow_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(15, rangeWalkRefXLimitHigh_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(16, rangeWalkRefYLimitLow_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(17, rangeWalkRefYLimitHigh_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(18, rangeWalkStepSizeXPlanningLimitLow_);
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(19, rangeWalkStepSizeXPlanningLimitHigh_);
      }
      if (((bitField0_ & 0x00080000) == 0x00080000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(20, rangeWalkStepSizeXLimitLow_);
      }
      if (((bitField0_ & 0x00100000) == 0x00100000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(21, rangeWalkStepSizeXLimitHigh_);
      }
      if (((bitField0_ & 0x00200000) == 0x00200000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(22, walkStepDuration_);
      }
      if (((bitField0_ & 0x00400000) == 0x00400000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(23, walkStepDurationAtFullSpeedX_);
      }
      if (((bitField0_ & 0x00800000) == 0x00800000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(24, walkStepDurationAtFullSpeedY_);
      }
      if (((bitField0_ & 0x01000000) == 0x01000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(25, vectorWalkHeightX_);
      }
      if (((bitField0_ & 0x02000000) == 0x02000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(26, vectorWalkHeightY_);
      }
      if (((bitField0_ & 0x04000000) == 0x04000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(27, walkArmRotationAtFullSpeedX_);
      }
      if (((bitField0_ & 0x08000000) == 0x08000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(28, walkMovePhaseBeginning_);
      }
      if (((bitField0_ & 0x10000000) == 0x10000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(29, walkMovePhaseLength_);
      }
      if (((bitField0_ & 0x20000000) == 0x20000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(30, walkLiftPhaseBeginning_);
      }
      if (((bitField0_ & 0x40000000) == 0x40000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(31, walkLiftPhaseLength_);
      }
      if (((bitField0_ & 0x80000000) == 0x80000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(32, vectorWalkLiftOffSetX_);
      }
      if (((bitField1_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(33, vectorWalkLiftOffSetY_);
      }
      if (((bitField1_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(34, vectorWalkLiftOffSetZ_);
      }
      if (((bitField1_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(35, vectorWalkLiftOffSetAtFullSpeedXX_);
      }
      if (((bitField1_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(36, vectorWalkLiftOffSetAtFullSpeedXY_);
      }
      if (((bitField1_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(37, vectorWalkLiftOffSetAtFullSpeedXZ_);
      }
      if (((bitField1_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(38, vectorWalkLiftOffSetAtFullSpeedYX_);
      }
      if (((bitField1_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(39, vectorWalkLiftOffSetAtFullSpeedYY_);
      }
      if (((bitField1_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(40, vectorWalkLiftOffSetAtFullSpeedYZ_);
      }
      if (((bitField1_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(41, vectorWalkLiftRotationX_);
      }
      if (((bitField1_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(42, vectorWalkLiftRotationY_);
      }
      if (((bitField1_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(43, vectorWalkLiftRotationZ_);
      }
      if (((bitField1_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(44, walkSupportRotation_);
      }
      if (((bitField1_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(45, walkComLiftOffSetX_);
      }
      if (((bitField1_ & 0x00002000) == 0x00002000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(46, walkComLiftOffSetY_);
      }
      if (((bitField1_ & 0x00004000) == 0x00004000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(47, walkComLiftOffSetZ_);
      }
      if (((bitField1_ & 0x00008000) == 0x00008000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(48, walkComBodyRotation_);
      }
      if (((bitField1_ & 0x00010000) == 0x00010000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(49, speedMaxRot_);
      }
      if (((bitField1_ & 0x00020000) == 0x00020000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(50, speedMaxVectorX_);
      }
      if (((bitField1_ & 0x00040000) == 0x00040000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(51, speedMaxVectorY_);
      }
      if (((bitField1_ & 0x00080000) == 0x00080000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(52, speedMaxBackwards_);
      }
      if (((bitField1_ & 0x00100000) == 0x00100000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(53, speedMaxChangeRot_);
      }
      if (((bitField1_ & 0x00200000) == 0x00200000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(54, speedMaxChangeVectorX_);
      }
      if (((bitField1_ & 0x00400000) == 0x00400000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(55, speedMaxChangeVectorY_);
      }
      if (((bitField1_ & 0x00800000) == 0x00800000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(56, balance_);
      }
      if (((bitField1_ & 0x01000000) == 0x01000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(57, vectorBalanceBodyRotationX_);
      }
      if (((bitField1_ & 0x02000000) == 0x02000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(58, vectorBalanceBodyRotationY_);
      }
      if (((bitField1_ & 0x04000000) == 0x04000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(59, vectorBalanceComX_);
      }
      if (((bitField1_ & 0x08000000) == 0x08000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(60, vectorBalanceComY_);
      }
      if (((bitField1_ & 0x10000000) == 0x10000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(61, vectorBalanceComVelocityX_);
      }
      if (((bitField1_ & 0x20000000) == 0x20000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(62, vectorBalanceComVelocityY_);
      }
      if (((bitField1_ & 0x40000000) == 0x40000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(63, vectorBalanceRefX_);
      }
      if (((bitField1_ & 0x80000000) == 0x80000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(64, vectorBalanceRefY_);
      }
      if (((bitField2_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(65, vectorBalanceNextRefX_);
      }
      if (((bitField2_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(66, vectorBalanceNextRefY_);
      }
      if (((bitField2_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(67, vectorBalanceStepSizeX_);
      }
      if (((bitField2_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(68, vectorBalanceStepSizeY_);
      }
      if (((bitField2_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(69, observerMeasurementDelay_);
      }
      if (((bitField2_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(70, vectorObserverMeasurementDeviationX_);
      }
      if (((bitField2_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(71, vectorObserverMeasurementDeviationY_);
      }
      if (((bitField2_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(72, vectorObserverProcessDeviationX_);
      }
      if (((bitField2_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(73, vectorObserverProcessDeviationY_);
      }
      if (((bitField2_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(74, vectorObserverProcessDeviationZ_);
      }
      if (((bitField2_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(75, vectorObserverProcessDeviationW_);
      }
      if (((bitField2_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(76, odometryScaleRot_);
      }
      if (((bitField2_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(77, odometryScaleVectorX_);
      }
      if (((bitField2_ & 0x00002000) == 0x00002000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(78, odometryScaleVectorY_);
      }
      if (((bitField2_ & 0x00004000) == 0x00004000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(79, gyroStateGain_);
      }
      if (((bitField2_ & 0x00008000) == 0x00008000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(80, gyroDerivativeGain_);
      }
      if (((bitField2_ & 0x00010000) == 0x00010000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(81, gyroSmoothing_);
      }
      if (((bitField2_ & 0x00020000) == 0x00020000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(82, minRotationToReduceStepSize_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static messages.EngineParameters.WalkEnginePreferences parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static messages.EngineParameters.WalkEnginePreferences parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static messages.EngineParameters.WalkEnginePreferences parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static messages.EngineParameters.WalkEnginePreferences parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static messages.EngineParameters.WalkEnginePreferences parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static messages.EngineParameters.WalkEnginePreferences parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static messages.EngineParameters.WalkEnginePreferences parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static messages.EngineParameters.WalkEnginePreferences parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static messages.EngineParameters.WalkEnginePreferences parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static messages.EngineParameters.WalkEnginePreferences parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(messages.EngineParameters.WalkEnginePreferences prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code messages.WalkEnginePreferences}
     *
     * <pre>
     *Com = center of mass.
     *any parameter that is part of a vector will have "vector" in its name.
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements messages.EngineParameters.WalkEnginePreferencesOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return messages.EngineParameters.internal_static_messages_WalkEnginePreferences_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return messages.EngineParameters.internal_static_messages_WalkEnginePreferences_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                messages.EngineParameters.WalkEnginePreferences.class, messages.EngineParameters.WalkEnginePreferences.Builder.class);
      }

      // Construct using messages.EngineParameters.WalkEnginePreferences.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        vectorStandComPosY_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000001);
        vectorStandComPosZ_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000002);
        standBodyTilt_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000004);
        vectorStandArmJointAngleX_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000008);
        vectorStandArmJointAngleY_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000010);
        standHardnessAnklePitch_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000020);
        standHardnessAnkleRoll_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000040);
        vectorWalkRefX_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000080);
        vectorWalkRefY_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000100);
        vectorWalkRefAtFullSpeedX_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000200);
        vectorWalkRefAtFullSpeedY_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000400);
        rangeWalkRefPlanningLimitLow_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000800);
        rangeWalkRefPlanningLimitHigh_ = 0F;
        bitField0_ = (bitField0_ & ~0x00001000);
        rangeWalkRefXLimitLow_ = 0F;
        bitField0_ = (bitField0_ & ~0x00002000);
        rangeWalkRefXLimitHigh_ = 0F;
        bitField0_ = (bitField0_ & ~0x00004000);
        rangeWalkRefYLimitLow_ = 0F;
        bitField0_ = (bitField0_ & ~0x00008000);
        rangeWalkRefYLimitHigh_ = 0F;
        bitField0_ = (bitField0_ & ~0x00010000);
        rangeWalkStepSizeXPlanningLimitLow_ = 0F;
        bitField0_ = (bitField0_ & ~0x00020000);
        rangeWalkStepSizeXPlanningLimitHigh_ = 0F;
        bitField0_ = (bitField0_ & ~0x00040000);
        rangeWalkStepSizeXLimitLow_ = 0F;
        bitField0_ = (bitField0_ & ~0x00080000);
        rangeWalkStepSizeXLimitHigh_ = 0F;
        bitField0_ = (bitField0_ & ~0x00100000);
        walkStepDuration_ = 0F;
        bitField0_ = (bitField0_ & ~0x00200000);
        walkStepDurationAtFullSpeedX_ = 0F;
        bitField0_ = (bitField0_ & ~0x00400000);
        walkStepDurationAtFullSpeedY_ = 0F;
        bitField0_ = (bitField0_ & ~0x00800000);
        vectorWalkHeightX_ = 0F;
        bitField0_ = (bitField0_ & ~0x01000000);
        vectorWalkHeightY_ = 0F;
        bitField0_ = (bitField0_ & ~0x02000000);
        walkArmRotationAtFullSpeedX_ = 0F;
        bitField0_ = (bitField0_ & ~0x04000000);
        walkMovePhaseBeginning_ = 0F;
        bitField0_ = (bitField0_ & ~0x08000000);
        walkMovePhaseLength_ = 0F;
        bitField0_ = (bitField0_ & ~0x10000000);
        walkLiftPhaseBeginning_ = 0F;
        bitField0_ = (bitField0_ & ~0x20000000);
        walkLiftPhaseLength_ = 0F;
        bitField0_ = (bitField0_ & ~0x40000000);
        vectorWalkLiftOffSetX_ = 0F;
        bitField0_ = (bitField0_ & ~0x80000000);
        vectorWalkLiftOffSetY_ = 0F;
        bitField1_ = (bitField1_ & ~0x00000001);
        vectorWalkLiftOffSetZ_ = 0F;
        bitField1_ = (bitField1_ & ~0x00000002);
        vectorWalkLiftOffSetAtFullSpeedXX_ = 0F;
        bitField1_ = (bitField1_ & ~0x00000004);
        vectorWalkLiftOffSetAtFullSpeedXY_ = 0F;
        bitField1_ = (bitField1_ & ~0x00000008);
        vectorWalkLiftOffSetAtFullSpeedXZ_ = 0F;
        bitField1_ = (bitField1_ & ~0x00000010);
        vectorWalkLiftOffSetAtFullSpeedYX_ = 0F;
        bitField1_ = (bitField1_ & ~0x00000020);
        vectorWalkLiftOffSetAtFullSpeedYY_ = 0F;
        bitField1_ = (bitField1_ & ~0x00000040);
        vectorWalkLiftOffSetAtFullSpeedYZ_ = 0F;
        bitField1_ = (bitField1_ & ~0x00000080);
        vectorWalkLiftRotationX_ = 0F;
        bitField1_ = (bitField1_ & ~0x00000100);
        vectorWalkLiftRotationY_ = 0F;
        bitField1_ = (bitField1_ & ~0x00000200);
        vectorWalkLiftRotationZ_ = 0F;
        bitField1_ = (bitField1_ & ~0x00000400);
        walkSupportRotation_ = 0F;
        bitField1_ = (bitField1_ & ~0x00000800);
        walkComLiftOffSetX_ = 0F;
        bitField1_ = (bitField1_ & ~0x00001000);
        walkComLiftOffSetY_ = 0F;
        bitField1_ = (bitField1_ & ~0x00002000);
        walkComLiftOffSetZ_ = 0F;
        bitField1_ = (bitField1_ & ~0x00004000);
        walkComBodyRotation_ = 0F;
        bitField1_ = (bitField1_ & ~0x00008000);
        speedMaxRot_ = 0F;
        bitField1_ = (bitField1_ & ~0x00010000);
        speedMaxVectorX_ = 0F;
        bitField1_ = (bitField1_ & ~0x00020000);
        speedMaxVectorY_ = 0F;
        bitField1_ = (bitField1_ & ~0x00040000);
        speedMaxBackwards_ = 0F;
        bitField1_ = (bitField1_ & ~0x00080000);
        speedMaxChangeRot_ = 0F;
        bitField1_ = (bitField1_ & ~0x00100000);
        speedMaxChangeVectorX_ = 0F;
        bitField1_ = (bitField1_ & ~0x00200000);
        speedMaxChangeVectorY_ = 0F;
        bitField1_ = (bitField1_ & ~0x00400000);
        balance_ = false;
        bitField1_ = (bitField1_ & ~0x00800000);
        vectorBalanceBodyRotationX_ = 0F;
        bitField1_ = (bitField1_ & ~0x01000000);
        vectorBalanceBodyRotationY_ = 0F;
        bitField1_ = (bitField1_ & ~0x02000000);
        vectorBalanceComX_ = 0F;
        bitField1_ = (bitField1_ & ~0x04000000);
        vectorBalanceComY_ = 0F;
        bitField1_ = (bitField1_ & ~0x08000000);
        vectorBalanceComVelocityX_ = 0F;
        bitField1_ = (bitField1_ & ~0x10000000);
        vectorBalanceComVelocityY_ = 0F;
        bitField1_ = (bitField1_ & ~0x20000000);
        vectorBalanceRefX_ = 0F;
        bitField1_ = (bitField1_ & ~0x40000000);
        vectorBalanceRefY_ = 0F;
        bitField1_ = (bitField1_ & ~0x80000000);
        vectorBalanceNextRefX_ = 0F;
        bitField2_ = (bitField2_ & ~0x00000001);
        vectorBalanceNextRefY_ = 0F;
        bitField2_ = (bitField2_ & ~0x00000002);
        vectorBalanceStepSizeX_ = 0F;
        bitField2_ = (bitField2_ & ~0x00000004);
        vectorBalanceStepSizeY_ = 0F;
        bitField2_ = (bitField2_ & ~0x00000008);
        observerMeasurementDelay_ = 0F;
        bitField2_ = (bitField2_ & ~0x00000010);
        vectorObserverMeasurementDeviationX_ = 0F;
        bitField2_ = (bitField2_ & ~0x00000020);
        vectorObserverMeasurementDeviationY_ = 0F;
        bitField2_ = (bitField2_ & ~0x00000040);
        vectorObserverProcessDeviationX_ = 0F;
        bitField2_ = (bitField2_ & ~0x00000080);
        vectorObserverProcessDeviationY_ = 0F;
        bitField2_ = (bitField2_ & ~0x00000100);
        vectorObserverProcessDeviationZ_ = 0F;
        bitField2_ = (bitField2_ & ~0x00000200);
        vectorObserverProcessDeviationW_ = 0F;
        bitField2_ = (bitField2_ & ~0x00000400);
        odometryScaleRot_ = 0F;
        bitField2_ = (bitField2_ & ~0x00000800);
        odometryScaleVectorX_ = 0F;
        bitField2_ = (bitField2_ & ~0x00001000);
        odometryScaleVectorY_ = 0F;
        bitField2_ = (bitField2_ & ~0x00002000);
        gyroStateGain_ = 0F;
        bitField2_ = (bitField2_ & ~0x00004000);
        gyroDerivativeGain_ = 0F;
        bitField2_ = (bitField2_ & ~0x00008000);
        gyroSmoothing_ = 0F;
        bitField2_ = (bitField2_ & ~0x00010000);
        minRotationToReduceStepSize_ = 0F;
        bitField2_ = (bitField2_ & ~0x00020000);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return messages.EngineParameters.internal_static_messages_WalkEnginePreferences_descriptor;
      }

      public messages.EngineParameters.WalkEnginePreferences getDefaultInstanceForType() {
        return messages.EngineParameters.WalkEnginePreferences.getDefaultInstance();
      }

      public messages.EngineParameters.WalkEnginePreferences build() {
        messages.EngineParameters.WalkEnginePreferences result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public messages.EngineParameters.WalkEnginePreferences buildPartial() {
        messages.EngineParameters.WalkEnginePreferences result = new messages.EngineParameters.WalkEnginePreferences(this);
        int from_bitField0_ = bitField0_;
        int from_bitField1_ = bitField1_;
        int from_bitField2_ = bitField2_;
        int to_bitField0_ = 0;
        int to_bitField1_ = 0;
        int to_bitField2_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.vectorStandComPosY_ = vectorStandComPosY_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.vectorStandComPosZ_ = vectorStandComPosZ_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.standBodyTilt_ = standBodyTilt_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.vectorStandArmJointAngleX_ = vectorStandArmJointAngleX_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.vectorStandArmJointAngleY_ = vectorStandArmJointAngleY_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.standHardnessAnklePitch_ = standHardnessAnklePitch_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.standHardnessAnkleRoll_ = standHardnessAnkleRoll_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.vectorWalkRefX_ = vectorWalkRefX_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.vectorWalkRefY_ = vectorWalkRefY_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.vectorWalkRefAtFullSpeedX_ = vectorWalkRefAtFullSpeedX_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000400;
        }
        result.vectorWalkRefAtFullSpeedY_ = vectorWalkRefAtFullSpeedY_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000800;
        }
        result.rangeWalkRefPlanningLimitLow_ = rangeWalkRefPlanningLimitLow_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00001000;
        }
        result.rangeWalkRefPlanningLimitHigh_ = rangeWalkRefPlanningLimitHigh_;
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00002000;
        }
        result.rangeWalkRefXLimitLow_ = rangeWalkRefXLimitLow_;
        if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
          to_bitField0_ |= 0x00004000;
        }
        result.rangeWalkRefXLimitHigh_ = rangeWalkRefXLimitHigh_;
        if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
          to_bitField0_ |= 0x00008000;
        }
        result.rangeWalkRefYLimitLow_ = rangeWalkRefYLimitLow_;
        if (((from_bitField0_ & 0x00010000) == 0x00010000)) {
          to_bitField0_ |= 0x00010000;
        }
        result.rangeWalkRefYLimitHigh_ = rangeWalkRefYLimitHigh_;
        if (((from_bitField0_ & 0x00020000) == 0x00020000)) {
          to_bitField0_ |= 0x00020000;
        }
        result.rangeWalkStepSizeXPlanningLimitLow_ = rangeWalkStepSizeXPlanningLimitLow_;
        if (((from_bitField0_ & 0x00040000) == 0x00040000)) {
          to_bitField0_ |= 0x00040000;
        }
        result.rangeWalkStepSizeXPlanningLimitHigh_ = rangeWalkStepSizeXPlanningLimitHigh_;
        if (((from_bitField0_ & 0x00080000) == 0x00080000)) {
          to_bitField0_ |= 0x00080000;
        }
        result.rangeWalkStepSizeXLimitLow_ = rangeWalkStepSizeXLimitLow_;
        if (((from_bitField0_ & 0x00100000) == 0x00100000)) {
          to_bitField0_ |= 0x00100000;
        }
        result.rangeWalkStepSizeXLimitHigh_ = rangeWalkStepSizeXLimitHigh_;
        if (((from_bitField0_ & 0x00200000) == 0x00200000)) {
          to_bitField0_ |= 0x00200000;
        }
        result.walkStepDuration_ = walkStepDuration_;
        if (((from_bitField0_ & 0x00400000) == 0x00400000)) {
          to_bitField0_ |= 0x00400000;
        }
        result.walkStepDurationAtFullSpeedX_ = walkStepDurationAtFullSpeedX_;
        if (((from_bitField0_ & 0x00800000) == 0x00800000)) {
          to_bitField0_ |= 0x00800000;
        }
        result.walkStepDurationAtFullSpeedY_ = walkStepDurationAtFullSpeedY_;
        if (((from_bitField0_ & 0x01000000) == 0x01000000)) {
          to_bitField0_ |= 0x01000000;
        }
        result.vectorWalkHeightX_ = vectorWalkHeightX_;
        if (((from_bitField0_ & 0x02000000) == 0x02000000)) {
          to_bitField0_ |= 0x02000000;
        }
        result.vectorWalkHeightY_ = vectorWalkHeightY_;
        if (((from_bitField0_ & 0x04000000) == 0x04000000)) {
          to_bitField0_ |= 0x04000000;
        }
        result.walkArmRotationAtFullSpeedX_ = walkArmRotationAtFullSpeedX_;
        if (((from_bitField0_ & 0x08000000) == 0x08000000)) {
          to_bitField0_ |= 0x08000000;
        }
        result.walkMovePhaseBeginning_ = walkMovePhaseBeginning_;
        if (((from_bitField0_ & 0x10000000) == 0x10000000)) {
          to_bitField0_ |= 0x10000000;
        }
        result.walkMovePhaseLength_ = walkMovePhaseLength_;
        if (((from_bitField0_ & 0x20000000) == 0x20000000)) {
          to_bitField0_ |= 0x20000000;
        }
        result.walkLiftPhaseBeginning_ = walkLiftPhaseBeginning_;
        if (((from_bitField0_ & 0x40000000) == 0x40000000)) {
          to_bitField0_ |= 0x40000000;
        }
        result.walkLiftPhaseLength_ = walkLiftPhaseLength_;
        if (((from_bitField0_ & 0x80000000) == 0x80000000)) {
          to_bitField0_ |= 0x80000000;
        }
        result.vectorWalkLiftOffSetX_ = vectorWalkLiftOffSetX_;
        if (((from_bitField1_ & 0x00000001) == 0x00000001)) {
          to_bitField1_ |= 0x00000001;
        }
        result.vectorWalkLiftOffSetY_ = vectorWalkLiftOffSetY_;
        if (((from_bitField1_ & 0x00000002) == 0x00000002)) {
          to_bitField1_ |= 0x00000002;
        }
        result.vectorWalkLiftOffSetZ_ = vectorWalkLiftOffSetZ_;
        if (((from_bitField1_ & 0x00000004) == 0x00000004)) {
          to_bitField1_ |= 0x00000004;
        }
        result.vectorWalkLiftOffSetAtFullSpeedXX_ = vectorWalkLiftOffSetAtFullSpeedXX_;
        if (((from_bitField1_ & 0x00000008) == 0x00000008)) {
          to_bitField1_ |= 0x00000008;
        }
        result.vectorWalkLiftOffSetAtFullSpeedXY_ = vectorWalkLiftOffSetAtFullSpeedXY_;
        if (((from_bitField1_ & 0x00000010) == 0x00000010)) {
          to_bitField1_ |= 0x00000010;
        }
        result.vectorWalkLiftOffSetAtFullSpeedXZ_ = vectorWalkLiftOffSetAtFullSpeedXZ_;
        if (((from_bitField1_ & 0x00000020) == 0x00000020)) {
          to_bitField1_ |= 0x00000020;
        }
        result.vectorWalkLiftOffSetAtFullSpeedYX_ = vectorWalkLiftOffSetAtFullSpeedYX_;
        if (((from_bitField1_ & 0x00000040) == 0x00000040)) {
          to_bitField1_ |= 0x00000040;
        }
        result.vectorWalkLiftOffSetAtFullSpeedYY_ = vectorWalkLiftOffSetAtFullSpeedYY_;
        if (((from_bitField1_ & 0x00000080) == 0x00000080)) {
          to_bitField1_ |= 0x00000080;
        }
        result.vectorWalkLiftOffSetAtFullSpeedYZ_ = vectorWalkLiftOffSetAtFullSpeedYZ_;
        if (((from_bitField1_ & 0x00000100) == 0x00000100)) {
          to_bitField1_ |= 0x00000100;
        }
        result.vectorWalkLiftRotationX_ = vectorWalkLiftRotationX_;
        if (((from_bitField1_ & 0x00000200) == 0x00000200)) {
          to_bitField1_ |= 0x00000200;
        }
        result.vectorWalkLiftRotationY_ = vectorWalkLiftRotationY_;
        if (((from_bitField1_ & 0x00000400) == 0x00000400)) {
          to_bitField1_ |= 0x00000400;
        }
        result.vectorWalkLiftRotationZ_ = vectorWalkLiftRotationZ_;
        if (((from_bitField1_ & 0x00000800) == 0x00000800)) {
          to_bitField1_ |= 0x00000800;
        }
        result.walkSupportRotation_ = walkSupportRotation_;
        if (((from_bitField1_ & 0x00001000) == 0x00001000)) {
          to_bitField1_ |= 0x00001000;
        }
        result.walkComLiftOffSetX_ = walkComLiftOffSetX_;
        if (((from_bitField1_ & 0x00002000) == 0x00002000)) {
          to_bitField1_ |= 0x00002000;
        }
        result.walkComLiftOffSetY_ = walkComLiftOffSetY_;
        if (((from_bitField1_ & 0x00004000) == 0x00004000)) {
          to_bitField1_ |= 0x00004000;
        }
        result.walkComLiftOffSetZ_ = walkComLiftOffSetZ_;
        if (((from_bitField1_ & 0x00008000) == 0x00008000)) {
          to_bitField1_ |= 0x00008000;
        }
        result.walkComBodyRotation_ = walkComBodyRotation_;
        if (((from_bitField1_ & 0x00010000) == 0x00010000)) {
          to_bitField1_ |= 0x00010000;
        }
        result.speedMaxRot_ = speedMaxRot_;
        if (((from_bitField1_ & 0x00020000) == 0x00020000)) {
          to_bitField1_ |= 0x00020000;
        }
        result.speedMaxVectorX_ = speedMaxVectorX_;
        if (((from_bitField1_ & 0x00040000) == 0x00040000)) {
          to_bitField1_ |= 0x00040000;
        }
        result.speedMaxVectorY_ = speedMaxVectorY_;
        if (((from_bitField1_ & 0x00080000) == 0x00080000)) {
          to_bitField1_ |= 0x00080000;
        }
        result.speedMaxBackwards_ = speedMaxBackwards_;
        if (((from_bitField1_ & 0x00100000) == 0x00100000)) {
          to_bitField1_ |= 0x00100000;
        }
        result.speedMaxChangeRot_ = speedMaxChangeRot_;
        if (((from_bitField1_ & 0x00200000) == 0x00200000)) {
          to_bitField1_ |= 0x00200000;
        }
        result.speedMaxChangeVectorX_ = speedMaxChangeVectorX_;
        if (((from_bitField1_ & 0x00400000) == 0x00400000)) {
          to_bitField1_ |= 0x00400000;
        }
        result.speedMaxChangeVectorY_ = speedMaxChangeVectorY_;
        if (((from_bitField1_ & 0x00800000) == 0x00800000)) {
          to_bitField1_ |= 0x00800000;
        }
        result.balance_ = balance_;
        if (((from_bitField1_ & 0x01000000) == 0x01000000)) {
          to_bitField1_ |= 0x01000000;
        }
        result.vectorBalanceBodyRotationX_ = vectorBalanceBodyRotationX_;
        if (((from_bitField1_ & 0x02000000) == 0x02000000)) {
          to_bitField1_ |= 0x02000000;
        }
        result.vectorBalanceBodyRotationY_ = vectorBalanceBodyRotationY_;
        if (((from_bitField1_ & 0x04000000) == 0x04000000)) {
          to_bitField1_ |= 0x04000000;
        }
        result.vectorBalanceComX_ = vectorBalanceComX_;
        if (((from_bitField1_ & 0x08000000) == 0x08000000)) {
          to_bitField1_ |= 0x08000000;
        }
        result.vectorBalanceComY_ = vectorBalanceComY_;
        if (((from_bitField1_ & 0x10000000) == 0x10000000)) {
          to_bitField1_ |= 0x10000000;
        }
        result.vectorBalanceComVelocityX_ = vectorBalanceComVelocityX_;
        if (((from_bitField1_ & 0x20000000) == 0x20000000)) {
          to_bitField1_ |= 0x20000000;
        }
        result.vectorBalanceComVelocityY_ = vectorBalanceComVelocityY_;
        if (((from_bitField1_ & 0x40000000) == 0x40000000)) {
          to_bitField1_ |= 0x40000000;
        }
        result.vectorBalanceRefX_ = vectorBalanceRefX_;
        if (((from_bitField1_ & 0x80000000) == 0x80000000)) {
          to_bitField1_ |= 0x80000000;
        }
        result.vectorBalanceRefY_ = vectorBalanceRefY_;
        if (((from_bitField2_ & 0x00000001) == 0x00000001)) {
          to_bitField2_ |= 0x00000001;
        }
        result.vectorBalanceNextRefX_ = vectorBalanceNextRefX_;
        if (((from_bitField2_ & 0x00000002) == 0x00000002)) {
          to_bitField2_ |= 0x00000002;
        }
        result.vectorBalanceNextRefY_ = vectorBalanceNextRefY_;
        if (((from_bitField2_ & 0x00000004) == 0x00000004)) {
          to_bitField2_ |= 0x00000004;
        }
        result.vectorBalanceStepSizeX_ = vectorBalanceStepSizeX_;
        if (((from_bitField2_ & 0x00000008) == 0x00000008)) {
          to_bitField2_ |= 0x00000008;
        }
        result.vectorBalanceStepSizeY_ = vectorBalanceStepSizeY_;
        if (((from_bitField2_ & 0x00000010) == 0x00000010)) {
          to_bitField2_ |= 0x00000010;
        }
        result.observerMeasurementDelay_ = observerMeasurementDelay_;
        if (((from_bitField2_ & 0x00000020) == 0x00000020)) {
          to_bitField2_ |= 0x00000020;
        }
        result.vectorObserverMeasurementDeviationX_ = vectorObserverMeasurementDeviationX_;
        if (((from_bitField2_ & 0x00000040) == 0x00000040)) {
          to_bitField2_ |= 0x00000040;
        }
        result.vectorObserverMeasurementDeviationY_ = vectorObserverMeasurementDeviationY_;
        if (((from_bitField2_ & 0x00000080) == 0x00000080)) {
          to_bitField2_ |= 0x00000080;
        }
        result.vectorObserverProcessDeviationX_ = vectorObserverProcessDeviationX_;
        if (((from_bitField2_ & 0x00000100) == 0x00000100)) {
          to_bitField2_ |= 0x00000100;
        }
        result.vectorObserverProcessDeviationY_ = vectorObserverProcessDeviationY_;
        if (((from_bitField2_ & 0x00000200) == 0x00000200)) {
          to_bitField2_ |= 0x00000200;
        }
        result.vectorObserverProcessDeviationZ_ = vectorObserverProcessDeviationZ_;
        if (((from_bitField2_ & 0x00000400) == 0x00000400)) {
          to_bitField2_ |= 0x00000400;
        }
        result.vectorObserverProcessDeviationW_ = vectorObserverProcessDeviationW_;
        if (((from_bitField2_ & 0x00000800) == 0x00000800)) {
          to_bitField2_ |= 0x00000800;
        }
        result.odometryScaleRot_ = odometryScaleRot_;
        if (((from_bitField2_ & 0x00001000) == 0x00001000)) {
          to_bitField2_ |= 0x00001000;
        }
        result.odometryScaleVectorX_ = odometryScaleVectorX_;
        if (((from_bitField2_ & 0x00002000) == 0x00002000)) {
          to_bitField2_ |= 0x00002000;
        }
        result.odometryScaleVectorY_ = odometryScaleVectorY_;
        if (((from_bitField2_ & 0x00004000) == 0x00004000)) {
          to_bitField2_ |= 0x00004000;
        }
        result.gyroStateGain_ = gyroStateGain_;
        if (((from_bitField2_ & 0x00008000) == 0x00008000)) {
          to_bitField2_ |= 0x00008000;
        }
        result.gyroDerivativeGain_ = gyroDerivativeGain_;
        if (((from_bitField2_ & 0x00010000) == 0x00010000)) {
          to_bitField2_ |= 0x00010000;
        }
        result.gyroSmoothing_ = gyroSmoothing_;
        if (((from_bitField2_ & 0x00020000) == 0x00020000)) {
          to_bitField2_ |= 0x00020000;
        }
        result.minRotationToReduceStepSize_ = minRotationToReduceStepSize_;
        result.bitField0_ = to_bitField0_;
        result.bitField1_ = to_bitField1_;
        result.bitField2_ = to_bitField2_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof messages.EngineParameters.WalkEnginePreferences) {
          return mergeFrom((messages.EngineParameters.WalkEnginePreferences)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(messages.EngineParameters.WalkEnginePreferences other) {
        if (other == messages.EngineParameters.WalkEnginePreferences.getDefaultInstance()) return this;
        if (other.hasVectorStandComPosY()) {
          setVectorStandComPosY(other.getVectorStandComPosY());
        }
        if (other.hasVectorStandComPosZ()) {
          setVectorStandComPosZ(other.getVectorStandComPosZ());
        }
        if (other.hasStandBodyTilt()) {
          setStandBodyTilt(other.getStandBodyTilt());
        }
        if (other.hasVectorStandArmJointAngleX()) {
          setVectorStandArmJointAngleX(other.getVectorStandArmJointAngleX());
        }
        if (other.hasVectorStandArmJointAngleY()) {
          setVectorStandArmJointAngleY(other.getVectorStandArmJointAngleY());
        }
        if (other.hasStandHardnessAnklePitch()) {
          setStandHardnessAnklePitch(other.getStandHardnessAnklePitch());
        }
        if (other.hasStandHardnessAnkleRoll()) {
          setStandHardnessAnkleRoll(other.getStandHardnessAnkleRoll());
        }
        if (other.hasVectorWalkRefX()) {
          setVectorWalkRefX(other.getVectorWalkRefX());
        }
        if (other.hasVectorWalkRefY()) {
          setVectorWalkRefY(other.getVectorWalkRefY());
        }
        if (other.hasVectorWalkRefAtFullSpeedX()) {
          setVectorWalkRefAtFullSpeedX(other.getVectorWalkRefAtFullSpeedX());
        }
        if (other.hasVectorWalkRefAtFullSpeedY()) {
          setVectorWalkRefAtFullSpeedY(other.getVectorWalkRefAtFullSpeedY());
        }
        if (other.hasRangeWalkRefPlanningLimitLow()) {
          setRangeWalkRefPlanningLimitLow(other.getRangeWalkRefPlanningLimitLow());
        }
        if (other.hasRangeWalkRefPlanningLimitHigh()) {
          setRangeWalkRefPlanningLimitHigh(other.getRangeWalkRefPlanningLimitHigh());
        }
        if (other.hasRangeWalkRefXLimitLow()) {
          setRangeWalkRefXLimitLow(other.getRangeWalkRefXLimitLow());
        }
        if (other.hasRangeWalkRefXLimitHigh()) {
          setRangeWalkRefXLimitHigh(other.getRangeWalkRefXLimitHigh());
        }
        if (other.hasRangeWalkRefYLimitLow()) {
          setRangeWalkRefYLimitLow(other.getRangeWalkRefYLimitLow());
        }
        if (other.hasRangeWalkRefYLimitHigh()) {
          setRangeWalkRefYLimitHigh(other.getRangeWalkRefYLimitHigh());
        }
        if (other.hasRangeWalkStepSizeXPlanningLimitLow()) {
          setRangeWalkStepSizeXPlanningLimitLow(other.getRangeWalkStepSizeXPlanningLimitLow());
        }
        if (other.hasRangeWalkStepSizeXPlanningLimitHigh()) {
          setRangeWalkStepSizeXPlanningLimitHigh(other.getRangeWalkStepSizeXPlanningLimitHigh());
        }
        if (other.hasRangeWalkStepSizeXLimitLow()) {
          setRangeWalkStepSizeXLimitLow(other.getRangeWalkStepSizeXLimitLow());
        }
        if (other.hasRangeWalkStepSizeXLimitHigh()) {
          setRangeWalkStepSizeXLimitHigh(other.getRangeWalkStepSizeXLimitHigh());
        }
        if (other.hasWalkStepDuration()) {
          setWalkStepDuration(other.getWalkStepDuration());
        }
        if (other.hasWalkStepDurationAtFullSpeedX()) {
          setWalkStepDurationAtFullSpeedX(other.getWalkStepDurationAtFullSpeedX());
        }
        if (other.hasWalkStepDurationAtFullSpeedY()) {
          setWalkStepDurationAtFullSpeedY(other.getWalkStepDurationAtFullSpeedY());
        }
        if (other.hasVectorWalkHeightX()) {
          setVectorWalkHeightX(other.getVectorWalkHeightX());
        }
        if (other.hasVectorWalkHeightY()) {
          setVectorWalkHeightY(other.getVectorWalkHeightY());
        }
        if (other.hasWalkArmRotationAtFullSpeedX()) {
          setWalkArmRotationAtFullSpeedX(other.getWalkArmRotationAtFullSpeedX());
        }
        if (other.hasWalkMovePhaseBeginning()) {
          setWalkMovePhaseBeginning(other.getWalkMovePhaseBeginning());
        }
        if (other.hasWalkMovePhaseLength()) {
          setWalkMovePhaseLength(other.getWalkMovePhaseLength());
        }
        if (other.hasWalkLiftPhaseBeginning()) {
          setWalkLiftPhaseBeginning(other.getWalkLiftPhaseBeginning());
        }
        if (other.hasWalkLiftPhaseLength()) {
          setWalkLiftPhaseLength(other.getWalkLiftPhaseLength());
        }
        if (other.hasVectorWalkLiftOffSetX()) {
          setVectorWalkLiftOffSetX(other.getVectorWalkLiftOffSetX());
        }
        if (other.hasVectorWalkLiftOffSetY()) {
          setVectorWalkLiftOffSetY(other.getVectorWalkLiftOffSetY());
        }
        if (other.hasVectorWalkLiftOffSetZ()) {
          setVectorWalkLiftOffSetZ(other.getVectorWalkLiftOffSetZ());
        }
        if (other.hasVectorWalkLiftOffSetAtFullSpeedXX()) {
          setVectorWalkLiftOffSetAtFullSpeedXX(other.getVectorWalkLiftOffSetAtFullSpeedXX());
        }
        if (other.hasVectorWalkLiftOffSetAtFullSpeedXY()) {
          setVectorWalkLiftOffSetAtFullSpeedXY(other.getVectorWalkLiftOffSetAtFullSpeedXY());
        }
        if (other.hasVectorWalkLiftOffSetAtFullSpeedXZ()) {
          setVectorWalkLiftOffSetAtFullSpeedXZ(other.getVectorWalkLiftOffSetAtFullSpeedXZ());
        }
        if (other.hasVectorWalkLiftOffSetAtFullSpeedYX()) {
          setVectorWalkLiftOffSetAtFullSpeedYX(other.getVectorWalkLiftOffSetAtFullSpeedYX());
        }
        if (other.hasVectorWalkLiftOffSetAtFullSpeedYY()) {
          setVectorWalkLiftOffSetAtFullSpeedYY(other.getVectorWalkLiftOffSetAtFullSpeedYY());
        }
        if (other.hasVectorWalkLiftOffSetAtFullSpeedYZ()) {
          setVectorWalkLiftOffSetAtFullSpeedYZ(other.getVectorWalkLiftOffSetAtFullSpeedYZ());
        }
        if (other.hasVectorWalkLiftRotationX()) {
          setVectorWalkLiftRotationX(other.getVectorWalkLiftRotationX());
        }
        if (other.hasVectorWalkLiftRotationY()) {
          setVectorWalkLiftRotationY(other.getVectorWalkLiftRotationY());
        }
        if (other.hasVectorWalkLiftRotationZ()) {
          setVectorWalkLiftRotationZ(other.getVectorWalkLiftRotationZ());
        }
        if (other.hasWalkSupportRotation()) {
          setWalkSupportRotation(other.getWalkSupportRotation());
        }
        if (other.hasWalkComLiftOffSetX()) {
          setWalkComLiftOffSetX(other.getWalkComLiftOffSetX());
        }
        if (other.hasWalkComLiftOffSetY()) {
          setWalkComLiftOffSetY(other.getWalkComLiftOffSetY());
        }
        if (other.hasWalkComLiftOffSetZ()) {
          setWalkComLiftOffSetZ(other.getWalkComLiftOffSetZ());
        }
        if (other.hasWalkComBodyRotation()) {
          setWalkComBodyRotation(other.getWalkComBodyRotation());
        }
        if (other.hasSpeedMaxRot()) {
          setSpeedMaxRot(other.getSpeedMaxRot());
        }
        if (other.hasSpeedMaxVectorX()) {
          setSpeedMaxVectorX(other.getSpeedMaxVectorX());
        }
        if (other.hasSpeedMaxVectorY()) {
          setSpeedMaxVectorY(other.getSpeedMaxVectorY());
        }
        if (other.hasSpeedMaxBackwards()) {
          setSpeedMaxBackwards(other.getSpeedMaxBackwards());
        }
        if (other.hasSpeedMaxChangeRot()) {
          setSpeedMaxChangeRot(other.getSpeedMaxChangeRot());
        }
        if (other.hasSpeedMaxChangeVectorX()) {
          setSpeedMaxChangeVectorX(other.getSpeedMaxChangeVectorX());
        }
        if (other.hasSpeedMaxChangeVectorY()) {
          setSpeedMaxChangeVectorY(other.getSpeedMaxChangeVectorY());
        }
        if (other.hasBalance()) {
          setBalance(other.getBalance());
        }
        if (other.hasVectorBalanceBodyRotationX()) {
          setVectorBalanceBodyRotationX(other.getVectorBalanceBodyRotationX());
        }
        if (other.hasVectorBalanceBodyRotationY()) {
          setVectorBalanceBodyRotationY(other.getVectorBalanceBodyRotationY());
        }
        if (other.hasVectorBalanceComX()) {
          setVectorBalanceComX(other.getVectorBalanceComX());
        }
        if (other.hasVectorBalanceComY()) {
          setVectorBalanceComY(other.getVectorBalanceComY());
        }
        if (other.hasVectorBalanceComVelocityX()) {
          setVectorBalanceComVelocityX(other.getVectorBalanceComVelocityX());
        }
        if (other.hasVectorBalanceComVelocityY()) {
          setVectorBalanceComVelocityY(other.getVectorBalanceComVelocityY());
        }
        if (other.hasVectorBalanceRefX()) {
          setVectorBalanceRefX(other.getVectorBalanceRefX());
        }
        if (other.hasVectorBalanceRefY()) {
          setVectorBalanceRefY(other.getVectorBalanceRefY());
        }
        if (other.hasVectorBalanceNextRefX()) {
          setVectorBalanceNextRefX(other.getVectorBalanceNextRefX());
        }
        if (other.hasVectorBalanceNextRefY()) {
          setVectorBalanceNextRefY(other.getVectorBalanceNextRefY());
        }
        if (other.hasVectorBalanceStepSizeX()) {
          setVectorBalanceStepSizeX(other.getVectorBalanceStepSizeX());
        }
        if (other.hasVectorBalanceStepSizeY()) {
          setVectorBalanceStepSizeY(other.getVectorBalanceStepSizeY());
        }
        if (other.hasObserverMeasurementDelay()) {
          setObserverMeasurementDelay(other.getObserverMeasurementDelay());
        }
        if (other.hasVectorObserverMeasurementDeviationX()) {
          setVectorObserverMeasurementDeviationX(other.getVectorObserverMeasurementDeviationX());
        }
        if (other.hasVectorObserverMeasurementDeviationY()) {
          setVectorObserverMeasurementDeviationY(other.getVectorObserverMeasurementDeviationY());
        }
        if (other.hasVectorObserverProcessDeviationX()) {
          setVectorObserverProcessDeviationX(other.getVectorObserverProcessDeviationX());
        }
        if (other.hasVectorObserverProcessDeviationY()) {
          setVectorObserverProcessDeviationY(other.getVectorObserverProcessDeviationY());
        }
        if (other.hasVectorObserverProcessDeviationZ()) {
          setVectorObserverProcessDeviationZ(other.getVectorObserverProcessDeviationZ());
        }
        if (other.hasVectorObserverProcessDeviationW()) {
          setVectorObserverProcessDeviationW(other.getVectorObserverProcessDeviationW());
        }
        if (other.hasOdometryScaleRot()) {
          setOdometryScaleRot(other.getOdometryScaleRot());
        }
        if (other.hasOdometryScaleVectorX()) {
          setOdometryScaleVectorX(other.getOdometryScaleVectorX());
        }
        if (other.hasOdometryScaleVectorY()) {
          setOdometryScaleVectorY(other.getOdometryScaleVectorY());
        }
        if (other.hasGyroStateGain()) {
          setGyroStateGain(other.getGyroStateGain());
        }
        if (other.hasGyroDerivativeGain()) {
          setGyroDerivativeGain(other.getGyroDerivativeGain());
        }
        if (other.hasGyroSmoothing()) {
          setGyroSmoothing(other.getGyroSmoothing());
        }
        if (other.hasMinRotationToReduceStepSize()) {
          setMinRotationToReduceStepSize(other.getMinRotationToReduceStepSize());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        messages.EngineParameters.WalkEnginePreferences parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (messages.EngineParameters.WalkEnginePreferences) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;
      private int bitField1_;
      private int bitField2_;

      // optional float vectorStandComPos_y = 1;
      private float vectorStandComPosY_ ;
      /**
       * <code>optional float vectorStandComPos_y = 1;</code>
       */
      public boolean hasVectorStandComPosY() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional float vectorStandComPos_y = 1;</code>
       */
      public float getVectorStandComPosY() {
        return vectorStandComPosY_;
      }
      /**
       * <code>optional float vectorStandComPos_y = 1;</code>
       */
      public Builder setVectorStandComPosY(float value) {
        bitField0_ |= 0x00000001;
        vectorStandComPosY_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float vectorStandComPos_y = 1;</code>
       */
      public Builder clearVectorStandComPosY() {
        bitField0_ = (bitField0_ & ~0x00000001);
        vectorStandComPosY_ = 0F;
        onChanged();
        return this;
      }

      // optional float vectorStandComPos_z = 2;
      private float vectorStandComPosZ_ ;
      /**
       * <code>optional float vectorStandComPos_z = 2;</code>
       */
      public boolean hasVectorStandComPosZ() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional float vectorStandComPos_z = 2;</code>
       */
      public float getVectorStandComPosZ() {
        return vectorStandComPosZ_;
      }
      /**
       * <code>optional float vectorStandComPos_z = 2;</code>
       */
      public Builder setVectorStandComPosZ(float value) {
        bitField0_ |= 0x00000002;
        vectorStandComPosZ_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float vectorStandComPos_z = 2;</code>
       */
      public Builder clearVectorStandComPosZ() {
        bitField0_ = (bitField0_ & ~0x00000002);
        vectorStandComPosZ_ = 0F;
        onChanged();
        return this;
      }

      // optional float standBodyTilt = 3;
      private float standBodyTilt_ ;
      /**
       * <code>optional float standBodyTilt = 3;</code>
       */
      public boolean hasStandBodyTilt() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional float standBodyTilt = 3;</code>
       */
      public float getStandBodyTilt() {
        return standBodyTilt_;
      }
      /**
       * <code>optional float standBodyTilt = 3;</code>
       */
      public Builder setStandBodyTilt(float value) {
        bitField0_ |= 0x00000004;
        standBodyTilt_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float standBodyTilt = 3;</code>
       */
      public Builder clearStandBodyTilt() {
        bitField0_ = (bitField0_ & ~0x00000004);
        standBodyTilt_ = 0F;
        onChanged();
        return this;
      }

      // optional float vectorStandArmJointAngle_x = 4;
      private float vectorStandArmJointAngleX_ ;
      /**
       * <code>optional float vectorStandArmJointAngle_x = 4;</code>
       */
      public boolean hasVectorStandArmJointAngleX() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional float vectorStandArmJointAngle_x = 4;</code>
       */
      public float getVectorStandArmJointAngleX() {
        return vectorStandArmJointAngleX_;
      }
      /**
       * <code>optional float vectorStandArmJointAngle_x = 4;</code>
       */
      public Builder setVectorStandArmJointAngleX(float value) {
        bitField0_ |= 0x00000008;
        vectorStandArmJointAngleX_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float vectorStandArmJointAngle_x = 4;</code>
       */
      public Builder clearVectorStandArmJointAngleX() {
        bitField0_ = (bitField0_ & ~0x00000008);
        vectorStandArmJointAngleX_ = 0F;
        onChanged();
        return this;
      }

      // optional float vectorStandArmJointAngle_y = 5;
      private float vectorStandArmJointAngleY_ ;
      /**
       * <code>optional float vectorStandArmJointAngle_y = 5;</code>
       */
      public boolean hasVectorStandArmJointAngleY() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional float vectorStandArmJointAngle_y = 5;</code>
       */
      public float getVectorStandArmJointAngleY() {
        return vectorStandArmJointAngleY_;
      }
      /**
       * <code>optional float vectorStandArmJointAngle_y = 5;</code>
       */
      public Builder setVectorStandArmJointAngleY(float value) {
        bitField0_ |= 0x00000010;
        vectorStandArmJointAngleY_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float vectorStandArmJointAngle_y = 5;</code>
       */
      public Builder clearVectorStandArmJointAngleY() {
        bitField0_ = (bitField0_ & ~0x00000010);
        vectorStandArmJointAngleY_ = 0F;
        onChanged();
        return this;
      }

      // optional int64 standHardnessAnklePitch = 6;
      private long standHardnessAnklePitch_ ;
      /**
       * <code>optional int64 standHardnessAnklePitch = 6;</code>
       */
      public boolean hasStandHardnessAnklePitch() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional int64 standHardnessAnklePitch = 6;</code>
       */
      public long getStandHardnessAnklePitch() {
        return standHardnessAnklePitch_;
      }
      /**
       * <code>optional int64 standHardnessAnklePitch = 6;</code>
       */
      public Builder setStandHardnessAnklePitch(long value) {
        bitField0_ |= 0x00000020;
        standHardnessAnklePitch_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 standHardnessAnklePitch = 6;</code>
       */
      public Builder clearStandHardnessAnklePitch() {
        bitField0_ = (bitField0_ & ~0x00000020);
        standHardnessAnklePitch_ = 0L;
        onChanged();
        return this;
      }

      // optional int64 standHardnessAnkleRoll = 7;
      private long standHardnessAnkleRoll_ ;
      /**
       * <code>optional int64 standHardnessAnkleRoll = 7;</code>
       */
      public boolean hasStandHardnessAnkleRoll() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional int64 standHardnessAnkleRoll = 7;</code>
       */
      public long getStandHardnessAnkleRoll() {
        return standHardnessAnkleRoll_;
      }
      /**
       * <code>optional int64 standHardnessAnkleRoll = 7;</code>
       */
      public Builder setStandHardnessAnkleRoll(long value) {
        bitField0_ |= 0x00000040;
        standHardnessAnkleRoll_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 standHardnessAnkleRoll = 7;</code>
       */
      public Builder clearStandHardnessAnkleRoll() {
        bitField0_ = (bitField0_ & ~0x00000040);
        standHardnessAnkleRoll_ = 0L;
        onChanged();
        return this;
      }

      // optional float vectorWalkRef_x = 8;
      private float vectorWalkRefX_ ;
      /**
       * <code>optional float vectorWalkRef_x = 8;</code>
       */
      public boolean hasVectorWalkRefX() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional float vectorWalkRef_x = 8;</code>
       */
      public float getVectorWalkRefX() {
        return vectorWalkRefX_;
      }
      /**
       * <code>optional float vectorWalkRef_x = 8;</code>
       */
      public Builder setVectorWalkRefX(float value) {
        bitField0_ |= 0x00000080;
        vectorWalkRefX_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float vectorWalkRef_x = 8;</code>
       */
      public Builder clearVectorWalkRefX() {
        bitField0_ = (bitField0_ & ~0x00000080);
        vectorWalkRefX_ = 0F;
        onChanged();
        return this;
      }

      // optional float vectorWalkRef_y = 9;
      private float vectorWalkRefY_ ;
      /**
       * <code>optional float vectorWalkRef_y = 9;</code>
       */
      public boolean hasVectorWalkRefY() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional float vectorWalkRef_y = 9;</code>
       */
      public float getVectorWalkRefY() {
        return vectorWalkRefY_;
      }
      /**
       * <code>optional float vectorWalkRef_y = 9;</code>
       */
      public Builder setVectorWalkRefY(float value) {
        bitField0_ |= 0x00000100;
        vectorWalkRefY_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float vectorWalkRef_y = 9;</code>
       */
      public Builder clearVectorWalkRefY() {
        bitField0_ = (bitField0_ & ~0x00000100);
        vectorWalkRefY_ = 0F;
        onChanged();
        return this;
      }

      // optional float vectorWalkRefAtFullSpeed_x = 10;
      private float vectorWalkRefAtFullSpeedX_ ;
      /**
       * <code>optional float vectorWalkRefAtFullSpeed_x = 10;</code>
       */
      public boolean hasVectorWalkRefAtFullSpeedX() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional float vectorWalkRefAtFullSpeed_x = 10;</code>
       */
      public float getVectorWalkRefAtFullSpeedX() {
        return vectorWalkRefAtFullSpeedX_;
      }
      /**
       * <code>optional float vectorWalkRefAtFullSpeed_x = 10;</code>
       */
      public Builder setVectorWalkRefAtFullSpeedX(float value) {
        bitField0_ |= 0x00000200;
        vectorWalkRefAtFullSpeedX_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float vectorWalkRefAtFullSpeed_x = 10;</code>
       */
      public Builder clearVectorWalkRefAtFullSpeedX() {
        bitField0_ = (bitField0_ & ~0x00000200);
        vectorWalkRefAtFullSpeedX_ = 0F;
        onChanged();
        return this;
      }

      // optional float vectorWalkRefAtFullSpeed_y = 11;
      private float vectorWalkRefAtFullSpeedY_ ;
      /**
       * <code>optional float vectorWalkRefAtFullSpeed_y = 11;</code>
       */
      public boolean hasVectorWalkRefAtFullSpeedY() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional float vectorWalkRefAtFullSpeed_y = 11;</code>
       */
      public float getVectorWalkRefAtFullSpeedY() {
        return vectorWalkRefAtFullSpeedY_;
      }
      /**
       * <code>optional float vectorWalkRefAtFullSpeed_y = 11;</code>
       */
      public Builder setVectorWalkRefAtFullSpeedY(float value) {
        bitField0_ |= 0x00000400;
        vectorWalkRefAtFullSpeedY_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float vectorWalkRefAtFullSpeed_y = 11;</code>
       */
      public Builder clearVectorWalkRefAtFullSpeedY() {
        bitField0_ = (bitField0_ & ~0x00000400);
        vectorWalkRefAtFullSpeedY_ = 0F;
        onChanged();
        return this;
      }

      // optional float rangeWalkRefPlanningLimit_low = 12;
      private float rangeWalkRefPlanningLimitLow_ ;
      /**
       * <code>optional float rangeWalkRefPlanningLimit_low = 12;</code>
       */
      public boolean hasRangeWalkRefPlanningLimitLow() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional float rangeWalkRefPlanningLimit_low = 12;</code>
       */
      public float getRangeWalkRefPlanningLimitLow() {
        return rangeWalkRefPlanningLimitLow_;
      }
      /**
       * <code>optional float rangeWalkRefPlanningLimit_low = 12;</code>
       */
      public Builder setRangeWalkRefPlanningLimitLow(float value) {
        bitField0_ |= 0x00000800;
        rangeWalkRefPlanningLimitLow_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float rangeWalkRefPlanningLimit_low = 12;</code>
       */
      public Builder clearRangeWalkRefPlanningLimitLow() {
        bitField0_ = (bitField0_ & ~0x00000800);
        rangeWalkRefPlanningLimitLow_ = 0F;
        onChanged();
        return this;
      }

      // optional float rangeWalkRefPlanningLimit_high = 13;
      private float rangeWalkRefPlanningLimitHigh_ ;
      /**
       * <code>optional float rangeWalkRefPlanningLimit_high = 13;</code>
       */
      public boolean hasRangeWalkRefPlanningLimitHigh() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional float rangeWalkRefPlanningLimit_high = 13;</code>
       */
      public float getRangeWalkRefPlanningLimitHigh() {
        return rangeWalkRefPlanningLimitHigh_;
      }
      /**
       * <code>optional float rangeWalkRefPlanningLimit_high = 13;</code>
       */
      public Builder setRangeWalkRefPlanningLimitHigh(float value) {
        bitField0_ |= 0x00001000;
        rangeWalkRefPlanningLimitHigh_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float rangeWalkRefPlanningLimit_high = 13;</code>
       */
      public Builder clearRangeWalkRefPlanningLimitHigh() {
        bitField0_ = (bitField0_ & ~0x00001000);
        rangeWalkRefPlanningLimitHigh_ = 0F;
        onChanged();
        return this;
      }

      // optional float rangeWalkRefXLimit_low = 14;
      private float rangeWalkRefXLimitLow_ ;
      /**
       * <code>optional float rangeWalkRefXLimit_low = 14;</code>
       */
      public boolean hasRangeWalkRefXLimitLow() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>optional float rangeWalkRefXLimit_low = 14;</code>
       */
      public float getRangeWalkRefXLimitLow() {
        return rangeWalkRefXLimitLow_;
      }
      /**
       * <code>optional float rangeWalkRefXLimit_low = 14;</code>
       */
      public Builder setRangeWalkRefXLimitLow(float value) {
        bitField0_ |= 0x00002000;
        rangeWalkRefXLimitLow_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float rangeWalkRefXLimit_low = 14;</code>
       */
      public Builder clearRangeWalkRefXLimitLow() {
        bitField0_ = (bitField0_ & ~0x00002000);
        rangeWalkRefXLimitLow_ = 0F;
        onChanged();
        return this;
      }

      // optional float rangeWalkRefXLimit_high = 15;
      private float rangeWalkRefXLimitHigh_ ;
      /**
       * <code>optional float rangeWalkRefXLimit_high = 15;</code>
       */
      public boolean hasRangeWalkRefXLimitHigh() {
        return ((bitField0_ & 0x00004000) == 0x00004000);
      }
      /**
       * <code>optional float rangeWalkRefXLimit_high = 15;</code>
       */
      public float getRangeWalkRefXLimitHigh() {
        return rangeWalkRefXLimitHigh_;
      }
      /**
       * <code>optional float rangeWalkRefXLimit_high = 15;</code>
       */
      public Builder setRangeWalkRefXLimitHigh(float value) {
        bitField0_ |= 0x00004000;
        rangeWalkRefXLimitHigh_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float rangeWalkRefXLimit_high = 15;</code>
       */
      public Builder clearRangeWalkRefXLimitHigh() {
        bitField0_ = (bitField0_ & ~0x00004000);
        rangeWalkRefXLimitHigh_ = 0F;
        onChanged();
        return this;
      }

      // optional float rangeWalkRefYLimit_low = 16;
      private float rangeWalkRefYLimitLow_ ;
      /**
       * <code>optional float rangeWalkRefYLimit_low = 16;</code>
       */
      public boolean hasRangeWalkRefYLimitLow() {
        return ((bitField0_ & 0x00008000) == 0x00008000);
      }
      /**
       * <code>optional float rangeWalkRefYLimit_low = 16;</code>
       */
      public float getRangeWalkRefYLimitLow() {
        return rangeWalkRefYLimitLow_;
      }
      /**
       * <code>optional float rangeWalkRefYLimit_low = 16;</code>
       */
      public Builder setRangeWalkRefYLimitLow(float value) {
        bitField0_ |= 0x00008000;
        rangeWalkRefYLimitLow_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float rangeWalkRefYLimit_low = 16;</code>
       */
      public Builder clearRangeWalkRefYLimitLow() {
        bitField0_ = (bitField0_ & ~0x00008000);
        rangeWalkRefYLimitLow_ = 0F;
        onChanged();
        return this;
      }

      // optional float rangeWalkRefYLimit_high = 17;
      private float rangeWalkRefYLimitHigh_ ;
      /**
       * <code>optional float rangeWalkRefYLimit_high = 17;</code>
       */
      public boolean hasRangeWalkRefYLimitHigh() {
        return ((bitField0_ & 0x00010000) == 0x00010000);
      }
      /**
       * <code>optional float rangeWalkRefYLimit_high = 17;</code>
       */
      public float getRangeWalkRefYLimitHigh() {
        return rangeWalkRefYLimitHigh_;
      }
      /**
       * <code>optional float rangeWalkRefYLimit_high = 17;</code>
       */
      public Builder setRangeWalkRefYLimitHigh(float value) {
        bitField0_ |= 0x00010000;
        rangeWalkRefYLimitHigh_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float rangeWalkRefYLimit_high = 17;</code>
       */
      public Builder clearRangeWalkRefYLimitHigh() {
        bitField0_ = (bitField0_ & ~0x00010000);
        rangeWalkRefYLimitHigh_ = 0F;
        onChanged();
        return this;
      }

      // optional float rangeWalkStepSizeXPlanningLimit_low = 18;
      private float rangeWalkStepSizeXPlanningLimitLow_ ;
      /**
       * <code>optional float rangeWalkStepSizeXPlanningLimit_low = 18;</code>
       */
      public boolean hasRangeWalkStepSizeXPlanningLimitLow() {
        return ((bitField0_ & 0x00020000) == 0x00020000);
      }
      /**
       * <code>optional float rangeWalkStepSizeXPlanningLimit_low = 18;</code>
       */
      public float getRangeWalkStepSizeXPlanningLimitLow() {
        return rangeWalkStepSizeXPlanningLimitLow_;
      }
      /**
       * <code>optional float rangeWalkStepSizeXPlanningLimit_low = 18;</code>
       */
      public Builder setRangeWalkStepSizeXPlanningLimitLow(float value) {
        bitField0_ |= 0x00020000;
        rangeWalkStepSizeXPlanningLimitLow_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float rangeWalkStepSizeXPlanningLimit_low = 18;</code>
       */
      public Builder clearRangeWalkStepSizeXPlanningLimitLow() {
        bitField0_ = (bitField0_ & ~0x00020000);
        rangeWalkStepSizeXPlanningLimitLow_ = 0F;
        onChanged();
        return this;
      }

      // optional float rangeWalkStepSizeXPlanningLimit_high = 19;
      private float rangeWalkStepSizeXPlanningLimitHigh_ ;
      /**
       * <code>optional float rangeWalkStepSizeXPlanningLimit_high = 19;</code>
       */
      public boolean hasRangeWalkStepSizeXPlanningLimitHigh() {
        return ((bitField0_ & 0x00040000) == 0x00040000);
      }
      /**
       * <code>optional float rangeWalkStepSizeXPlanningLimit_high = 19;</code>
       */
      public float getRangeWalkStepSizeXPlanningLimitHigh() {
        return rangeWalkStepSizeXPlanningLimitHigh_;
      }
      /**
       * <code>optional float rangeWalkStepSizeXPlanningLimit_high = 19;</code>
       */
      public Builder setRangeWalkStepSizeXPlanningLimitHigh(float value) {
        bitField0_ |= 0x00040000;
        rangeWalkStepSizeXPlanningLimitHigh_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float rangeWalkStepSizeXPlanningLimit_high = 19;</code>
       */
      public Builder clearRangeWalkStepSizeXPlanningLimitHigh() {
        bitField0_ = (bitField0_ & ~0x00040000);
        rangeWalkStepSizeXPlanningLimitHigh_ = 0F;
        onChanged();
        return this;
      }

      // optional float rangeWalkStepSizeXLimit_low = 20;
      private float rangeWalkStepSizeXLimitLow_ ;
      /**
       * <code>optional float rangeWalkStepSizeXLimit_low = 20;</code>
       */
      public boolean hasRangeWalkStepSizeXLimitLow() {
        return ((bitField0_ & 0x00080000) == 0x00080000);
      }
      /**
       * <code>optional float rangeWalkStepSizeXLimit_low = 20;</code>
       */
      public float getRangeWalkStepSizeXLimitLow() {
        return rangeWalkStepSizeXLimitLow_;
      }
      /**
       * <code>optional float rangeWalkStepSizeXLimit_low = 20;</code>
       */
      public Builder setRangeWalkStepSizeXLimitLow(float value) {
        bitField0_ |= 0x00080000;
        rangeWalkStepSizeXLimitLow_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float rangeWalkStepSizeXLimit_low = 20;</code>
       */
      public Builder clearRangeWalkStepSizeXLimitLow() {
        bitField0_ = (bitField0_ & ~0x00080000);
        rangeWalkStepSizeXLimitLow_ = 0F;
        onChanged();
        return this;
      }

      // optional float rangeWalkStepSizeXLimit_high = 21;
      private float rangeWalkStepSizeXLimitHigh_ ;
      /**
       * <code>optional float rangeWalkStepSizeXLimit_high = 21;</code>
       */
      public boolean hasRangeWalkStepSizeXLimitHigh() {
        return ((bitField0_ & 0x00100000) == 0x00100000);
      }
      /**
       * <code>optional float rangeWalkStepSizeXLimit_high = 21;</code>
       */
      public float getRangeWalkStepSizeXLimitHigh() {
        return rangeWalkStepSizeXLimitHigh_;
      }
      /**
       * <code>optional float rangeWalkStepSizeXLimit_high = 21;</code>
       */
      public Builder setRangeWalkStepSizeXLimitHigh(float value) {
        bitField0_ |= 0x00100000;
        rangeWalkStepSizeXLimitHigh_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float rangeWalkStepSizeXLimit_high = 21;</code>
       */
      public Builder clearRangeWalkStepSizeXLimitHigh() {
        bitField0_ = (bitField0_ & ~0x00100000);
        rangeWalkStepSizeXLimitHigh_ = 0F;
        onChanged();
        return this;
      }

      // optional float walkStepDuration = 22;
      private float walkStepDuration_ ;
      /**
       * <code>optional float walkStepDuration = 22;</code>
       */
      public boolean hasWalkStepDuration() {
        return ((bitField0_ & 0x00200000) == 0x00200000);
      }
      /**
       * <code>optional float walkStepDuration = 22;</code>
       */
      public float getWalkStepDuration() {
        return walkStepDuration_;
      }
      /**
       * <code>optional float walkStepDuration = 22;</code>
       */
      public Builder setWalkStepDuration(float value) {
        bitField0_ |= 0x00200000;
        walkStepDuration_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float walkStepDuration = 22;</code>
       */
      public Builder clearWalkStepDuration() {
        bitField0_ = (bitField0_ & ~0x00200000);
        walkStepDuration_ = 0F;
        onChanged();
        return this;
      }

      // optional float walkStepDurationAtFullSpeedX = 23;
      private float walkStepDurationAtFullSpeedX_ ;
      /**
       * <code>optional float walkStepDurationAtFullSpeedX = 23;</code>
       */
      public boolean hasWalkStepDurationAtFullSpeedX() {
        return ((bitField0_ & 0x00400000) == 0x00400000);
      }
      /**
       * <code>optional float walkStepDurationAtFullSpeedX = 23;</code>
       */
      public float getWalkStepDurationAtFullSpeedX() {
        return walkStepDurationAtFullSpeedX_;
      }
      /**
       * <code>optional float walkStepDurationAtFullSpeedX = 23;</code>
       */
      public Builder setWalkStepDurationAtFullSpeedX(float value) {
        bitField0_ |= 0x00400000;
        walkStepDurationAtFullSpeedX_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float walkStepDurationAtFullSpeedX = 23;</code>
       */
      public Builder clearWalkStepDurationAtFullSpeedX() {
        bitField0_ = (bitField0_ & ~0x00400000);
        walkStepDurationAtFullSpeedX_ = 0F;
        onChanged();
        return this;
      }

      // optional float walkStepDurationAtFullSpeedY = 24;
      private float walkStepDurationAtFullSpeedY_ ;
      /**
       * <code>optional float walkStepDurationAtFullSpeedY = 24;</code>
       */
      public boolean hasWalkStepDurationAtFullSpeedY() {
        return ((bitField0_ & 0x00800000) == 0x00800000);
      }
      /**
       * <code>optional float walkStepDurationAtFullSpeedY = 24;</code>
       */
      public float getWalkStepDurationAtFullSpeedY() {
        return walkStepDurationAtFullSpeedY_;
      }
      /**
       * <code>optional float walkStepDurationAtFullSpeedY = 24;</code>
       */
      public Builder setWalkStepDurationAtFullSpeedY(float value) {
        bitField0_ |= 0x00800000;
        walkStepDurationAtFullSpeedY_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float walkStepDurationAtFullSpeedY = 24;</code>
       */
      public Builder clearWalkStepDurationAtFullSpeedY() {
        bitField0_ = (bitField0_ & ~0x00800000);
        walkStepDurationAtFullSpeedY_ = 0F;
        onChanged();
        return this;
      }

      // optional float vectorWalkHeight_x = 25;
      private float vectorWalkHeightX_ ;
      /**
       * <code>optional float vectorWalkHeight_x = 25;</code>
       */
      public boolean hasVectorWalkHeightX() {
        return ((bitField0_ & 0x01000000) == 0x01000000);
      }
      /**
       * <code>optional float vectorWalkHeight_x = 25;</code>
       */
      public float getVectorWalkHeightX() {
        return vectorWalkHeightX_;
      }
      /**
       * <code>optional float vectorWalkHeight_x = 25;</code>
       */
      public Builder setVectorWalkHeightX(float value) {
        bitField0_ |= 0x01000000;
        vectorWalkHeightX_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float vectorWalkHeight_x = 25;</code>
       */
      public Builder clearVectorWalkHeightX() {
        bitField0_ = (bitField0_ & ~0x01000000);
        vectorWalkHeightX_ = 0F;
        onChanged();
        return this;
      }

      // optional float vectorWalkHeight_y = 26;
      private float vectorWalkHeightY_ ;
      /**
       * <code>optional float vectorWalkHeight_y = 26;</code>
       */
      public boolean hasVectorWalkHeightY() {
        return ((bitField0_ & 0x02000000) == 0x02000000);
      }
      /**
       * <code>optional float vectorWalkHeight_y = 26;</code>
       */
      public float getVectorWalkHeightY() {
        return vectorWalkHeightY_;
      }
      /**
       * <code>optional float vectorWalkHeight_y = 26;</code>
       */
      public Builder setVectorWalkHeightY(float value) {
        bitField0_ |= 0x02000000;
        vectorWalkHeightY_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float vectorWalkHeight_y = 26;</code>
       */
      public Builder clearVectorWalkHeightY() {
        bitField0_ = (bitField0_ & ~0x02000000);
        vectorWalkHeightY_ = 0F;
        onChanged();
        return this;
      }

      // optional float walkArmRotationAtFullSpeedX = 27;
      private float walkArmRotationAtFullSpeedX_ ;
      /**
       * <code>optional float walkArmRotationAtFullSpeedX = 27;</code>
       */
      public boolean hasWalkArmRotationAtFullSpeedX() {
        return ((bitField0_ & 0x04000000) == 0x04000000);
      }
      /**
       * <code>optional float walkArmRotationAtFullSpeedX = 27;</code>
       */
      public float getWalkArmRotationAtFullSpeedX() {
        return walkArmRotationAtFullSpeedX_;
      }
      /**
       * <code>optional float walkArmRotationAtFullSpeedX = 27;</code>
       */
      public Builder setWalkArmRotationAtFullSpeedX(float value) {
        bitField0_ |= 0x04000000;
        walkArmRotationAtFullSpeedX_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float walkArmRotationAtFullSpeedX = 27;</code>
       */
      public Builder clearWalkArmRotationAtFullSpeedX() {
        bitField0_ = (bitField0_ & ~0x04000000);
        walkArmRotationAtFullSpeedX_ = 0F;
        onChanged();
        return this;
      }

      // optional float walkMovePhaseBeginning = 28;
      private float walkMovePhaseBeginning_ ;
      /**
       * <code>optional float walkMovePhaseBeginning = 28;</code>
       */
      public boolean hasWalkMovePhaseBeginning() {
        return ((bitField0_ & 0x08000000) == 0x08000000);
      }
      /**
       * <code>optional float walkMovePhaseBeginning = 28;</code>
       */
      public float getWalkMovePhaseBeginning() {
        return walkMovePhaseBeginning_;
      }
      /**
       * <code>optional float walkMovePhaseBeginning = 28;</code>
       */
      public Builder setWalkMovePhaseBeginning(float value) {
        bitField0_ |= 0x08000000;
        walkMovePhaseBeginning_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float walkMovePhaseBeginning = 28;</code>
       */
      public Builder clearWalkMovePhaseBeginning() {
        bitField0_ = (bitField0_ & ~0x08000000);
        walkMovePhaseBeginning_ = 0F;
        onChanged();
        return this;
      }

      // optional float walkMovePhaseLength = 29;
      private float walkMovePhaseLength_ ;
      /**
       * <code>optional float walkMovePhaseLength = 29;</code>
       */
      public boolean hasWalkMovePhaseLength() {
        return ((bitField0_ & 0x10000000) == 0x10000000);
      }
      /**
       * <code>optional float walkMovePhaseLength = 29;</code>
       */
      public float getWalkMovePhaseLength() {
        return walkMovePhaseLength_;
      }
      /**
       * <code>optional float walkMovePhaseLength = 29;</code>
       */
      public Builder setWalkMovePhaseLength(float value) {
        bitField0_ |= 0x10000000;
        walkMovePhaseLength_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float walkMovePhaseLength = 29;</code>
       */
      public Builder clearWalkMovePhaseLength() {
        bitField0_ = (bitField0_ & ~0x10000000);
        walkMovePhaseLength_ = 0F;
        onChanged();
        return this;
      }

      // optional float walkLiftPhaseBeginning = 30;
      private float walkLiftPhaseBeginning_ ;
      /**
       * <code>optional float walkLiftPhaseBeginning = 30;</code>
       */
      public boolean hasWalkLiftPhaseBeginning() {
        return ((bitField0_ & 0x20000000) == 0x20000000);
      }
      /**
       * <code>optional float walkLiftPhaseBeginning = 30;</code>
       */
      public float getWalkLiftPhaseBeginning() {
        return walkLiftPhaseBeginning_;
      }
      /**
       * <code>optional float walkLiftPhaseBeginning = 30;</code>
       */
      public Builder setWalkLiftPhaseBeginning(float value) {
        bitField0_ |= 0x20000000;
        walkLiftPhaseBeginning_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float walkLiftPhaseBeginning = 30;</code>
       */
      public Builder clearWalkLiftPhaseBeginning() {
        bitField0_ = (bitField0_ & ~0x20000000);
        walkLiftPhaseBeginning_ = 0F;
        onChanged();
        return this;
      }

      // optional float walkLiftPhaseLength = 31;
      private float walkLiftPhaseLength_ ;
      /**
       * <code>optional float walkLiftPhaseLength = 31;</code>
       */
      public boolean hasWalkLiftPhaseLength() {
        return ((bitField0_ & 0x40000000) == 0x40000000);
      }
      /**
       * <code>optional float walkLiftPhaseLength = 31;</code>
       */
      public float getWalkLiftPhaseLength() {
        return walkLiftPhaseLength_;
      }
      /**
       * <code>optional float walkLiftPhaseLength = 31;</code>
       */
      public Builder setWalkLiftPhaseLength(float value) {
        bitField0_ |= 0x40000000;
        walkLiftPhaseLength_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float walkLiftPhaseLength = 31;</code>
       */
      public Builder clearWalkLiftPhaseLength() {
        bitField0_ = (bitField0_ & ~0x40000000);
        walkLiftPhaseLength_ = 0F;
        onChanged();
        return this;
      }

      // optional float vectorWalkLiftOffSet_x = 32;
      private float vectorWalkLiftOffSetX_ ;
      /**
       * <code>optional float vectorWalkLiftOffSet_x = 32;</code>
       */
      public boolean hasVectorWalkLiftOffSetX() {
        return ((bitField0_ & 0x80000000) == 0x80000000);
      }
      /**
       * <code>optional float vectorWalkLiftOffSet_x = 32;</code>
       */
      public float getVectorWalkLiftOffSetX() {
        return vectorWalkLiftOffSetX_;
      }
      /**
       * <code>optional float vectorWalkLiftOffSet_x = 32;</code>
       */
      public Builder setVectorWalkLiftOffSetX(float value) {
        bitField0_ |= 0x80000000;
        vectorWalkLiftOffSetX_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float vectorWalkLiftOffSet_x = 32;</code>
       */
      public Builder clearVectorWalkLiftOffSetX() {
        bitField0_ = (bitField0_ & ~0x80000000);
        vectorWalkLiftOffSetX_ = 0F;
        onChanged();
        return this;
      }

      // optional float vectorWalkLiftOffSet_y = 33;
      private float vectorWalkLiftOffSetY_ ;
      /**
       * <code>optional float vectorWalkLiftOffSet_y = 33;</code>
       */
      public boolean hasVectorWalkLiftOffSetY() {
        return ((bitField1_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional float vectorWalkLiftOffSet_y = 33;</code>
       */
      public float getVectorWalkLiftOffSetY() {
        return vectorWalkLiftOffSetY_;
      }
      /**
       * <code>optional float vectorWalkLiftOffSet_y = 33;</code>
       */
      public Builder setVectorWalkLiftOffSetY(float value) {
        bitField1_ |= 0x00000001;
        vectorWalkLiftOffSetY_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float vectorWalkLiftOffSet_y = 33;</code>
       */
      public Builder clearVectorWalkLiftOffSetY() {
        bitField1_ = (bitField1_ & ~0x00000001);
        vectorWalkLiftOffSetY_ = 0F;
        onChanged();
        return this;
      }

      // optional float vectorWalkLiftOffSet_z = 34;
      private float vectorWalkLiftOffSetZ_ ;
      /**
       * <code>optional float vectorWalkLiftOffSet_z = 34;</code>
       */
      public boolean hasVectorWalkLiftOffSetZ() {
        return ((bitField1_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional float vectorWalkLiftOffSet_z = 34;</code>
       */
      public float getVectorWalkLiftOffSetZ() {
        return vectorWalkLiftOffSetZ_;
      }
      /**
       * <code>optional float vectorWalkLiftOffSet_z = 34;</code>
       */
      public Builder setVectorWalkLiftOffSetZ(float value) {
        bitField1_ |= 0x00000002;
        vectorWalkLiftOffSetZ_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float vectorWalkLiftOffSet_z = 34;</code>
       */
      public Builder clearVectorWalkLiftOffSetZ() {
        bitField1_ = (bitField1_ & ~0x00000002);
        vectorWalkLiftOffSetZ_ = 0F;
        onChanged();
        return this;
      }

      // optional float vectorWalkLiftOffSetAtFullSpeedX_x = 35;
      private float vectorWalkLiftOffSetAtFullSpeedXX_ ;
      /**
       * <code>optional float vectorWalkLiftOffSetAtFullSpeedX_x = 35;</code>
       */
      public boolean hasVectorWalkLiftOffSetAtFullSpeedXX() {
        return ((bitField1_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional float vectorWalkLiftOffSetAtFullSpeedX_x = 35;</code>
       */
      public float getVectorWalkLiftOffSetAtFullSpeedXX() {
        return vectorWalkLiftOffSetAtFullSpeedXX_;
      }
      /**
       * <code>optional float vectorWalkLiftOffSetAtFullSpeedX_x = 35;</code>
       */
      public Builder setVectorWalkLiftOffSetAtFullSpeedXX(float value) {
        bitField1_ |= 0x00000004;
        vectorWalkLiftOffSetAtFullSpeedXX_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float vectorWalkLiftOffSetAtFullSpeedX_x = 35;</code>
       */
      public Builder clearVectorWalkLiftOffSetAtFullSpeedXX() {
        bitField1_ = (bitField1_ & ~0x00000004);
        vectorWalkLiftOffSetAtFullSpeedXX_ = 0F;
        onChanged();
        return this;
      }

      // optional float vectorWalkLiftOffSetAtFullSpeedX_y = 36;
      private float vectorWalkLiftOffSetAtFullSpeedXY_ ;
      /**
       * <code>optional float vectorWalkLiftOffSetAtFullSpeedX_y = 36;</code>
       */
      public boolean hasVectorWalkLiftOffSetAtFullSpeedXY() {
        return ((bitField1_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional float vectorWalkLiftOffSetAtFullSpeedX_y = 36;</code>
       */
      public float getVectorWalkLiftOffSetAtFullSpeedXY() {
        return vectorWalkLiftOffSetAtFullSpeedXY_;
      }
      /**
       * <code>optional float vectorWalkLiftOffSetAtFullSpeedX_y = 36;</code>
       */
      public Builder setVectorWalkLiftOffSetAtFullSpeedXY(float value) {
        bitField1_ |= 0x00000008;
        vectorWalkLiftOffSetAtFullSpeedXY_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float vectorWalkLiftOffSetAtFullSpeedX_y = 36;</code>
       */
      public Builder clearVectorWalkLiftOffSetAtFullSpeedXY() {
        bitField1_ = (bitField1_ & ~0x00000008);
        vectorWalkLiftOffSetAtFullSpeedXY_ = 0F;
        onChanged();
        return this;
      }

      // optional float vectorWalkLiftOffSetAtFullSpeedX_z = 37;
      private float vectorWalkLiftOffSetAtFullSpeedXZ_ ;
      /**
       * <code>optional float vectorWalkLiftOffSetAtFullSpeedX_z = 37;</code>
       */
      public boolean hasVectorWalkLiftOffSetAtFullSpeedXZ() {
        return ((bitField1_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional float vectorWalkLiftOffSetAtFullSpeedX_z = 37;</code>
       */
      public float getVectorWalkLiftOffSetAtFullSpeedXZ() {
        return vectorWalkLiftOffSetAtFullSpeedXZ_;
      }
      /**
       * <code>optional float vectorWalkLiftOffSetAtFullSpeedX_z = 37;</code>
       */
      public Builder setVectorWalkLiftOffSetAtFullSpeedXZ(float value) {
        bitField1_ |= 0x00000010;
        vectorWalkLiftOffSetAtFullSpeedXZ_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float vectorWalkLiftOffSetAtFullSpeedX_z = 37;</code>
       */
      public Builder clearVectorWalkLiftOffSetAtFullSpeedXZ() {
        bitField1_ = (bitField1_ & ~0x00000010);
        vectorWalkLiftOffSetAtFullSpeedXZ_ = 0F;
        onChanged();
        return this;
      }

      // optional float vectorWalkLiftOffSetAtFullSpeedY_x = 38;
      private float vectorWalkLiftOffSetAtFullSpeedYX_ ;
      /**
       * <code>optional float vectorWalkLiftOffSetAtFullSpeedY_x = 38;</code>
       */
      public boolean hasVectorWalkLiftOffSetAtFullSpeedYX() {
        return ((bitField1_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional float vectorWalkLiftOffSetAtFullSpeedY_x = 38;</code>
       */
      public float getVectorWalkLiftOffSetAtFullSpeedYX() {
        return vectorWalkLiftOffSetAtFullSpeedYX_;
      }
      /**
       * <code>optional float vectorWalkLiftOffSetAtFullSpeedY_x = 38;</code>
       */
      public Builder setVectorWalkLiftOffSetAtFullSpeedYX(float value) {
        bitField1_ |= 0x00000020;
        vectorWalkLiftOffSetAtFullSpeedYX_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float vectorWalkLiftOffSetAtFullSpeedY_x = 38;</code>
       */
      public Builder clearVectorWalkLiftOffSetAtFullSpeedYX() {
        bitField1_ = (bitField1_ & ~0x00000020);
        vectorWalkLiftOffSetAtFullSpeedYX_ = 0F;
        onChanged();
        return this;
      }

      // optional float vectorWalkLiftOffSetAtFullSpeedY_y = 39;
      private float vectorWalkLiftOffSetAtFullSpeedYY_ ;
      /**
       * <code>optional float vectorWalkLiftOffSetAtFullSpeedY_y = 39;</code>
       */
      public boolean hasVectorWalkLiftOffSetAtFullSpeedYY() {
        return ((bitField1_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional float vectorWalkLiftOffSetAtFullSpeedY_y = 39;</code>
       */
      public float getVectorWalkLiftOffSetAtFullSpeedYY() {
        return vectorWalkLiftOffSetAtFullSpeedYY_;
      }
      /**
       * <code>optional float vectorWalkLiftOffSetAtFullSpeedY_y = 39;</code>
       */
      public Builder setVectorWalkLiftOffSetAtFullSpeedYY(float value) {
        bitField1_ |= 0x00000040;
        vectorWalkLiftOffSetAtFullSpeedYY_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float vectorWalkLiftOffSetAtFullSpeedY_y = 39;</code>
       */
      public Builder clearVectorWalkLiftOffSetAtFullSpeedYY() {
        bitField1_ = (bitField1_ & ~0x00000040);
        vectorWalkLiftOffSetAtFullSpeedYY_ = 0F;
        onChanged();
        return this;
      }

      // optional float vectorWalkLiftOffSetAtFullSpeedY_z = 40;
      private float vectorWalkLiftOffSetAtFullSpeedYZ_ ;
      /**
       * <code>optional float vectorWalkLiftOffSetAtFullSpeedY_z = 40;</code>
       */
      public boolean hasVectorWalkLiftOffSetAtFullSpeedYZ() {
        return ((bitField1_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional float vectorWalkLiftOffSetAtFullSpeedY_z = 40;</code>
       */
      public float getVectorWalkLiftOffSetAtFullSpeedYZ() {
        return vectorWalkLiftOffSetAtFullSpeedYZ_;
      }
      /**
       * <code>optional float vectorWalkLiftOffSetAtFullSpeedY_z = 40;</code>
       */
      public Builder setVectorWalkLiftOffSetAtFullSpeedYZ(float value) {
        bitField1_ |= 0x00000080;
        vectorWalkLiftOffSetAtFullSpeedYZ_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float vectorWalkLiftOffSetAtFullSpeedY_z = 40;</code>
       */
      public Builder clearVectorWalkLiftOffSetAtFullSpeedYZ() {
        bitField1_ = (bitField1_ & ~0x00000080);
        vectorWalkLiftOffSetAtFullSpeedYZ_ = 0F;
        onChanged();
        return this;
      }

      // optional float vectorWalkLiftRotation_x = 41;
      private float vectorWalkLiftRotationX_ ;
      /**
       * <code>optional float vectorWalkLiftRotation_x = 41;</code>
       */
      public boolean hasVectorWalkLiftRotationX() {
        return ((bitField1_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional float vectorWalkLiftRotation_x = 41;</code>
       */
      public float getVectorWalkLiftRotationX() {
        return vectorWalkLiftRotationX_;
      }
      /**
       * <code>optional float vectorWalkLiftRotation_x = 41;</code>
       */
      public Builder setVectorWalkLiftRotationX(float value) {
        bitField1_ |= 0x00000100;
        vectorWalkLiftRotationX_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float vectorWalkLiftRotation_x = 41;</code>
       */
      public Builder clearVectorWalkLiftRotationX() {
        bitField1_ = (bitField1_ & ~0x00000100);
        vectorWalkLiftRotationX_ = 0F;
        onChanged();
        return this;
      }

      // optional float vectorWalkLiftRotation_y = 42;
      private float vectorWalkLiftRotationY_ ;
      /**
       * <code>optional float vectorWalkLiftRotation_y = 42;</code>
       */
      public boolean hasVectorWalkLiftRotationY() {
        return ((bitField1_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional float vectorWalkLiftRotation_y = 42;</code>
       */
      public float getVectorWalkLiftRotationY() {
        return vectorWalkLiftRotationY_;
      }
      /**
       * <code>optional float vectorWalkLiftRotation_y = 42;</code>
       */
      public Builder setVectorWalkLiftRotationY(float value) {
        bitField1_ |= 0x00000200;
        vectorWalkLiftRotationY_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float vectorWalkLiftRotation_y = 42;</code>
       */
      public Builder clearVectorWalkLiftRotationY() {
        bitField1_ = (bitField1_ & ~0x00000200);
        vectorWalkLiftRotationY_ = 0F;
        onChanged();
        return this;
      }

      // optional float vectorWalkLiftRotation_z = 43;
      private float vectorWalkLiftRotationZ_ ;
      /**
       * <code>optional float vectorWalkLiftRotation_z = 43;</code>
       */
      public boolean hasVectorWalkLiftRotationZ() {
        return ((bitField1_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional float vectorWalkLiftRotation_z = 43;</code>
       */
      public float getVectorWalkLiftRotationZ() {
        return vectorWalkLiftRotationZ_;
      }
      /**
       * <code>optional float vectorWalkLiftRotation_z = 43;</code>
       */
      public Builder setVectorWalkLiftRotationZ(float value) {
        bitField1_ |= 0x00000400;
        vectorWalkLiftRotationZ_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float vectorWalkLiftRotation_z = 43;</code>
       */
      public Builder clearVectorWalkLiftRotationZ() {
        bitField1_ = (bitField1_ & ~0x00000400);
        vectorWalkLiftRotationZ_ = 0F;
        onChanged();
        return this;
      }

      // optional float walkSupportRotation = 44;
      private float walkSupportRotation_ ;
      /**
       * <code>optional float walkSupportRotation = 44;</code>
       */
      public boolean hasWalkSupportRotation() {
        return ((bitField1_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional float walkSupportRotation = 44;</code>
       */
      public float getWalkSupportRotation() {
        return walkSupportRotation_;
      }
      /**
       * <code>optional float walkSupportRotation = 44;</code>
       */
      public Builder setWalkSupportRotation(float value) {
        bitField1_ |= 0x00000800;
        walkSupportRotation_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float walkSupportRotation = 44;</code>
       */
      public Builder clearWalkSupportRotation() {
        bitField1_ = (bitField1_ & ~0x00000800);
        walkSupportRotation_ = 0F;
        onChanged();
        return this;
      }

      // optional float walkComLiftOffSet_x = 45;
      private float walkComLiftOffSetX_ ;
      /**
       * <code>optional float walkComLiftOffSet_x = 45;</code>
       */
      public boolean hasWalkComLiftOffSetX() {
        return ((bitField1_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional float walkComLiftOffSet_x = 45;</code>
       */
      public float getWalkComLiftOffSetX() {
        return walkComLiftOffSetX_;
      }
      /**
       * <code>optional float walkComLiftOffSet_x = 45;</code>
       */
      public Builder setWalkComLiftOffSetX(float value) {
        bitField1_ |= 0x00001000;
        walkComLiftOffSetX_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float walkComLiftOffSet_x = 45;</code>
       */
      public Builder clearWalkComLiftOffSetX() {
        bitField1_ = (bitField1_ & ~0x00001000);
        walkComLiftOffSetX_ = 0F;
        onChanged();
        return this;
      }

      // optional float walkComLiftOffSet_y = 46;
      private float walkComLiftOffSetY_ ;
      /**
       * <code>optional float walkComLiftOffSet_y = 46;</code>
       */
      public boolean hasWalkComLiftOffSetY() {
        return ((bitField1_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>optional float walkComLiftOffSet_y = 46;</code>
       */
      public float getWalkComLiftOffSetY() {
        return walkComLiftOffSetY_;
      }
      /**
       * <code>optional float walkComLiftOffSet_y = 46;</code>
       */
      public Builder setWalkComLiftOffSetY(float value) {
        bitField1_ |= 0x00002000;
        walkComLiftOffSetY_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float walkComLiftOffSet_y = 46;</code>
       */
      public Builder clearWalkComLiftOffSetY() {
        bitField1_ = (bitField1_ & ~0x00002000);
        walkComLiftOffSetY_ = 0F;
        onChanged();
        return this;
      }

      // optional float walkComLiftOffSet_z = 47;
      private float walkComLiftOffSetZ_ ;
      /**
       * <code>optional float walkComLiftOffSet_z = 47;</code>
       */
      public boolean hasWalkComLiftOffSetZ() {
        return ((bitField1_ & 0x00004000) == 0x00004000);
      }
      /**
       * <code>optional float walkComLiftOffSet_z = 47;</code>
       */
      public float getWalkComLiftOffSetZ() {
        return walkComLiftOffSetZ_;
      }
      /**
       * <code>optional float walkComLiftOffSet_z = 47;</code>
       */
      public Builder setWalkComLiftOffSetZ(float value) {
        bitField1_ |= 0x00004000;
        walkComLiftOffSetZ_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float walkComLiftOffSet_z = 47;</code>
       */
      public Builder clearWalkComLiftOffSetZ() {
        bitField1_ = (bitField1_ & ~0x00004000);
        walkComLiftOffSetZ_ = 0F;
        onChanged();
        return this;
      }

      // optional float walkComBodyRotation = 48;
      private float walkComBodyRotation_ ;
      /**
       * <code>optional float walkComBodyRotation = 48;</code>
       */
      public boolean hasWalkComBodyRotation() {
        return ((bitField1_ & 0x00008000) == 0x00008000);
      }
      /**
       * <code>optional float walkComBodyRotation = 48;</code>
       */
      public float getWalkComBodyRotation() {
        return walkComBodyRotation_;
      }
      /**
       * <code>optional float walkComBodyRotation = 48;</code>
       */
      public Builder setWalkComBodyRotation(float value) {
        bitField1_ |= 0x00008000;
        walkComBodyRotation_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float walkComBodyRotation = 48;</code>
       */
      public Builder clearWalkComBodyRotation() {
        bitField1_ = (bitField1_ & ~0x00008000);
        walkComBodyRotation_ = 0F;
        onChanged();
        return this;
      }

      // optional float speedMax_rot = 49;
      private float speedMaxRot_ ;
      /**
       * <code>optional float speedMax_rot = 49;</code>
       */
      public boolean hasSpeedMaxRot() {
        return ((bitField1_ & 0x00010000) == 0x00010000);
      }
      /**
       * <code>optional float speedMax_rot = 49;</code>
       */
      public float getSpeedMaxRot() {
        return speedMaxRot_;
      }
      /**
       * <code>optional float speedMax_rot = 49;</code>
       */
      public Builder setSpeedMaxRot(float value) {
        bitField1_ |= 0x00010000;
        speedMaxRot_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float speedMax_rot = 49;</code>
       */
      public Builder clearSpeedMaxRot() {
        bitField1_ = (bitField1_ & ~0x00010000);
        speedMaxRot_ = 0F;
        onChanged();
        return this;
      }

      // optional float speedMax_Vector_x = 50;
      private float speedMaxVectorX_ ;
      /**
       * <code>optional float speedMax_Vector_x = 50;</code>
       */
      public boolean hasSpeedMaxVectorX() {
        return ((bitField1_ & 0x00020000) == 0x00020000);
      }
      /**
       * <code>optional float speedMax_Vector_x = 50;</code>
       */
      public float getSpeedMaxVectorX() {
        return speedMaxVectorX_;
      }
      /**
       * <code>optional float speedMax_Vector_x = 50;</code>
       */
      public Builder setSpeedMaxVectorX(float value) {
        bitField1_ |= 0x00020000;
        speedMaxVectorX_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float speedMax_Vector_x = 50;</code>
       */
      public Builder clearSpeedMaxVectorX() {
        bitField1_ = (bitField1_ & ~0x00020000);
        speedMaxVectorX_ = 0F;
        onChanged();
        return this;
      }

      // optional float speedMax_Vector_y = 51;
      private float speedMaxVectorY_ ;
      /**
       * <code>optional float speedMax_Vector_y = 51;</code>
       */
      public boolean hasSpeedMaxVectorY() {
        return ((bitField1_ & 0x00040000) == 0x00040000);
      }
      /**
       * <code>optional float speedMax_Vector_y = 51;</code>
       */
      public float getSpeedMaxVectorY() {
        return speedMaxVectorY_;
      }
      /**
       * <code>optional float speedMax_Vector_y = 51;</code>
       */
      public Builder setSpeedMaxVectorY(float value) {
        bitField1_ |= 0x00040000;
        speedMaxVectorY_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float speedMax_Vector_y = 51;</code>
       */
      public Builder clearSpeedMaxVectorY() {
        bitField1_ = (bitField1_ & ~0x00040000);
        speedMaxVectorY_ = 0F;
        onChanged();
        return this;
      }

      // optional float speedMaxBackwards = 52;
      private float speedMaxBackwards_ ;
      /**
       * <code>optional float speedMaxBackwards = 52;</code>
       */
      public boolean hasSpeedMaxBackwards() {
        return ((bitField1_ & 0x00080000) == 0x00080000);
      }
      /**
       * <code>optional float speedMaxBackwards = 52;</code>
       */
      public float getSpeedMaxBackwards() {
        return speedMaxBackwards_;
      }
      /**
       * <code>optional float speedMaxBackwards = 52;</code>
       */
      public Builder setSpeedMaxBackwards(float value) {
        bitField1_ |= 0x00080000;
        speedMaxBackwards_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float speedMaxBackwards = 52;</code>
       */
      public Builder clearSpeedMaxBackwards() {
        bitField1_ = (bitField1_ & ~0x00080000);
        speedMaxBackwards_ = 0F;
        onChanged();
        return this;
      }

      // optional float speedMaxChange_rot = 53;
      private float speedMaxChangeRot_ ;
      /**
       * <code>optional float speedMaxChange_rot = 53;</code>
       */
      public boolean hasSpeedMaxChangeRot() {
        return ((bitField1_ & 0x00100000) == 0x00100000);
      }
      /**
       * <code>optional float speedMaxChange_rot = 53;</code>
       */
      public float getSpeedMaxChangeRot() {
        return speedMaxChangeRot_;
      }
      /**
       * <code>optional float speedMaxChange_rot = 53;</code>
       */
      public Builder setSpeedMaxChangeRot(float value) {
        bitField1_ |= 0x00100000;
        speedMaxChangeRot_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float speedMaxChange_rot = 53;</code>
       */
      public Builder clearSpeedMaxChangeRot() {
        bitField1_ = (bitField1_ & ~0x00100000);
        speedMaxChangeRot_ = 0F;
        onChanged();
        return this;
      }

      // optional float speedMaxChange_Vector_x = 54;
      private float speedMaxChangeVectorX_ ;
      /**
       * <code>optional float speedMaxChange_Vector_x = 54;</code>
       */
      public boolean hasSpeedMaxChangeVectorX() {
        return ((bitField1_ & 0x00200000) == 0x00200000);
      }
      /**
       * <code>optional float speedMaxChange_Vector_x = 54;</code>
       */
      public float getSpeedMaxChangeVectorX() {
        return speedMaxChangeVectorX_;
      }
      /**
       * <code>optional float speedMaxChange_Vector_x = 54;</code>
       */
      public Builder setSpeedMaxChangeVectorX(float value) {
        bitField1_ |= 0x00200000;
        speedMaxChangeVectorX_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float speedMaxChange_Vector_x = 54;</code>
       */
      public Builder clearSpeedMaxChangeVectorX() {
        bitField1_ = (bitField1_ & ~0x00200000);
        speedMaxChangeVectorX_ = 0F;
        onChanged();
        return this;
      }

      // optional float speedMaxChange_Vector_y = 55;
      private float speedMaxChangeVectorY_ ;
      /**
       * <code>optional float speedMaxChange_Vector_y = 55;</code>
       */
      public boolean hasSpeedMaxChangeVectorY() {
        return ((bitField1_ & 0x00400000) == 0x00400000);
      }
      /**
       * <code>optional float speedMaxChange_Vector_y = 55;</code>
       */
      public float getSpeedMaxChangeVectorY() {
        return speedMaxChangeVectorY_;
      }
      /**
       * <code>optional float speedMaxChange_Vector_y = 55;</code>
       */
      public Builder setSpeedMaxChangeVectorY(float value) {
        bitField1_ |= 0x00400000;
        speedMaxChangeVectorY_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float speedMaxChange_Vector_y = 55;</code>
       */
      public Builder clearSpeedMaxChangeVectorY() {
        bitField1_ = (bitField1_ & ~0x00400000);
        speedMaxChangeVectorY_ = 0F;
        onChanged();
        return this;
      }

      // optional bool balance = 56;
      private boolean balance_ ;
      /**
       * <code>optional bool balance = 56;</code>
       */
      public boolean hasBalance() {
        return ((bitField1_ & 0x00800000) == 0x00800000);
      }
      /**
       * <code>optional bool balance = 56;</code>
       */
      public boolean getBalance() {
        return balance_;
      }
      /**
       * <code>optional bool balance = 56;</code>
       */
      public Builder setBalance(boolean value) {
        bitField1_ |= 0x00800000;
        balance_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool balance = 56;</code>
       */
      public Builder clearBalance() {
        bitField1_ = (bitField1_ & ~0x00800000);
        balance_ = false;
        onChanged();
        return this;
      }

      // optional float vectorBalanceBodyRotation_x = 57;
      private float vectorBalanceBodyRotationX_ ;
      /**
       * <code>optional float vectorBalanceBodyRotation_x = 57;</code>
       */
      public boolean hasVectorBalanceBodyRotationX() {
        return ((bitField1_ & 0x01000000) == 0x01000000);
      }
      /**
       * <code>optional float vectorBalanceBodyRotation_x = 57;</code>
       */
      public float getVectorBalanceBodyRotationX() {
        return vectorBalanceBodyRotationX_;
      }
      /**
       * <code>optional float vectorBalanceBodyRotation_x = 57;</code>
       */
      public Builder setVectorBalanceBodyRotationX(float value) {
        bitField1_ |= 0x01000000;
        vectorBalanceBodyRotationX_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float vectorBalanceBodyRotation_x = 57;</code>
       */
      public Builder clearVectorBalanceBodyRotationX() {
        bitField1_ = (bitField1_ & ~0x01000000);
        vectorBalanceBodyRotationX_ = 0F;
        onChanged();
        return this;
      }

      // optional float vectorBalanceBodyRotation_y = 58;
      private float vectorBalanceBodyRotationY_ ;
      /**
       * <code>optional float vectorBalanceBodyRotation_y = 58;</code>
       */
      public boolean hasVectorBalanceBodyRotationY() {
        return ((bitField1_ & 0x02000000) == 0x02000000);
      }
      /**
       * <code>optional float vectorBalanceBodyRotation_y = 58;</code>
       */
      public float getVectorBalanceBodyRotationY() {
        return vectorBalanceBodyRotationY_;
      }
      /**
       * <code>optional float vectorBalanceBodyRotation_y = 58;</code>
       */
      public Builder setVectorBalanceBodyRotationY(float value) {
        bitField1_ |= 0x02000000;
        vectorBalanceBodyRotationY_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float vectorBalanceBodyRotation_y = 58;</code>
       */
      public Builder clearVectorBalanceBodyRotationY() {
        bitField1_ = (bitField1_ & ~0x02000000);
        vectorBalanceBodyRotationY_ = 0F;
        onChanged();
        return this;
      }

      // optional float vectorBalanceCom_x = 59;
      private float vectorBalanceComX_ ;
      /**
       * <code>optional float vectorBalanceCom_x = 59;</code>
       */
      public boolean hasVectorBalanceComX() {
        return ((bitField1_ & 0x04000000) == 0x04000000);
      }
      /**
       * <code>optional float vectorBalanceCom_x = 59;</code>
       */
      public float getVectorBalanceComX() {
        return vectorBalanceComX_;
      }
      /**
       * <code>optional float vectorBalanceCom_x = 59;</code>
       */
      public Builder setVectorBalanceComX(float value) {
        bitField1_ |= 0x04000000;
        vectorBalanceComX_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float vectorBalanceCom_x = 59;</code>
       */
      public Builder clearVectorBalanceComX() {
        bitField1_ = (bitField1_ & ~0x04000000);
        vectorBalanceComX_ = 0F;
        onChanged();
        return this;
      }

      // optional float vectorBalanceCom_y = 60;
      private float vectorBalanceComY_ ;
      /**
       * <code>optional float vectorBalanceCom_y = 60;</code>
       */
      public boolean hasVectorBalanceComY() {
        return ((bitField1_ & 0x08000000) == 0x08000000);
      }
      /**
       * <code>optional float vectorBalanceCom_y = 60;</code>
       */
      public float getVectorBalanceComY() {
        return vectorBalanceComY_;
      }
      /**
       * <code>optional float vectorBalanceCom_y = 60;</code>
       */
      public Builder setVectorBalanceComY(float value) {
        bitField1_ |= 0x08000000;
        vectorBalanceComY_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float vectorBalanceCom_y = 60;</code>
       */
      public Builder clearVectorBalanceComY() {
        bitField1_ = (bitField1_ & ~0x08000000);
        vectorBalanceComY_ = 0F;
        onChanged();
        return this;
      }

      // optional float vectorBalanceComVelocity_x = 61;
      private float vectorBalanceComVelocityX_ ;
      /**
       * <code>optional float vectorBalanceComVelocity_x = 61;</code>
       */
      public boolean hasVectorBalanceComVelocityX() {
        return ((bitField1_ & 0x10000000) == 0x10000000);
      }
      /**
       * <code>optional float vectorBalanceComVelocity_x = 61;</code>
       */
      public float getVectorBalanceComVelocityX() {
        return vectorBalanceComVelocityX_;
      }
      /**
       * <code>optional float vectorBalanceComVelocity_x = 61;</code>
       */
      public Builder setVectorBalanceComVelocityX(float value) {
        bitField1_ |= 0x10000000;
        vectorBalanceComVelocityX_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float vectorBalanceComVelocity_x = 61;</code>
       */
      public Builder clearVectorBalanceComVelocityX() {
        bitField1_ = (bitField1_ & ~0x10000000);
        vectorBalanceComVelocityX_ = 0F;
        onChanged();
        return this;
      }

      // optional float vectorBalanceComVelocity_y = 62;
      private float vectorBalanceComVelocityY_ ;
      /**
       * <code>optional float vectorBalanceComVelocity_y = 62;</code>
       */
      public boolean hasVectorBalanceComVelocityY() {
        return ((bitField1_ & 0x20000000) == 0x20000000);
      }
      /**
       * <code>optional float vectorBalanceComVelocity_y = 62;</code>
       */
      public float getVectorBalanceComVelocityY() {
        return vectorBalanceComVelocityY_;
      }
      /**
       * <code>optional float vectorBalanceComVelocity_y = 62;</code>
       */
      public Builder setVectorBalanceComVelocityY(float value) {
        bitField1_ |= 0x20000000;
        vectorBalanceComVelocityY_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float vectorBalanceComVelocity_y = 62;</code>
       */
      public Builder clearVectorBalanceComVelocityY() {
        bitField1_ = (bitField1_ & ~0x20000000);
        vectorBalanceComVelocityY_ = 0F;
        onChanged();
        return this;
      }

      // optional float vectorBalanceRef_x = 63;
      private float vectorBalanceRefX_ ;
      /**
       * <code>optional float vectorBalanceRef_x = 63;</code>
       */
      public boolean hasVectorBalanceRefX() {
        return ((bitField1_ & 0x40000000) == 0x40000000);
      }
      /**
       * <code>optional float vectorBalanceRef_x = 63;</code>
       */
      public float getVectorBalanceRefX() {
        return vectorBalanceRefX_;
      }
      /**
       * <code>optional float vectorBalanceRef_x = 63;</code>
       */
      public Builder setVectorBalanceRefX(float value) {
        bitField1_ |= 0x40000000;
        vectorBalanceRefX_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float vectorBalanceRef_x = 63;</code>
       */
      public Builder clearVectorBalanceRefX() {
        bitField1_ = (bitField1_ & ~0x40000000);
        vectorBalanceRefX_ = 0F;
        onChanged();
        return this;
      }

      // optional float vectorBalanceRef_y = 64;
      private float vectorBalanceRefY_ ;
      /**
       * <code>optional float vectorBalanceRef_y = 64;</code>
       */
      public boolean hasVectorBalanceRefY() {
        return ((bitField1_ & 0x80000000) == 0x80000000);
      }
      /**
       * <code>optional float vectorBalanceRef_y = 64;</code>
       */
      public float getVectorBalanceRefY() {
        return vectorBalanceRefY_;
      }
      /**
       * <code>optional float vectorBalanceRef_y = 64;</code>
       */
      public Builder setVectorBalanceRefY(float value) {
        bitField1_ |= 0x80000000;
        vectorBalanceRefY_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float vectorBalanceRef_y = 64;</code>
       */
      public Builder clearVectorBalanceRefY() {
        bitField1_ = (bitField1_ & ~0x80000000);
        vectorBalanceRefY_ = 0F;
        onChanged();
        return this;
      }

      // optional float vectorBalanceNextRef_x = 65;
      private float vectorBalanceNextRefX_ ;
      /**
       * <code>optional float vectorBalanceNextRef_x = 65;</code>
       */
      public boolean hasVectorBalanceNextRefX() {
        return ((bitField2_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional float vectorBalanceNextRef_x = 65;</code>
       */
      public float getVectorBalanceNextRefX() {
        return vectorBalanceNextRefX_;
      }
      /**
       * <code>optional float vectorBalanceNextRef_x = 65;</code>
       */
      public Builder setVectorBalanceNextRefX(float value) {
        bitField2_ |= 0x00000001;
        vectorBalanceNextRefX_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float vectorBalanceNextRef_x = 65;</code>
       */
      public Builder clearVectorBalanceNextRefX() {
        bitField2_ = (bitField2_ & ~0x00000001);
        vectorBalanceNextRefX_ = 0F;
        onChanged();
        return this;
      }

      // optional float vectorBalanceNextRef_y = 66;
      private float vectorBalanceNextRefY_ ;
      /**
       * <code>optional float vectorBalanceNextRef_y = 66;</code>
       */
      public boolean hasVectorBalanceNextRefY() {
        return ((bitField2_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional float vectorBalanceNextRef_y = 66;</code>
       */
      public float getVectorBalanceNextRefY() {
        return vectorBalanceNextRefY_;
      }
      /**
       * <code>optional float vectorBalanceNextRef_y = 66;</code>
       */
      public Builder setVectorBalanceNextRefY(float value) {
        bitField2_ |= 0x00000002;
        vectorBalanceNextRefY_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float vectorBalanceNextRef_y = 66;</code>
       */
      public Builder clearVectorBalanceNextRefY() {
        bitField2_ = (bitField2_ & ~0x00000002);
        vectorBalanceNextRefY_ = 0F;
        onChanged();
        return this;
      }

      // optional float vectorBalanceStepSize_x = 67;
      private float vectorBalanceStepSizeX_ ;
      /**
       * <code>optional float vectorBalanceStepSize_x = 67;</code>
       */
      public boolean hasVectorBalanceStepSizeX() {
        return ((bitField2_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional float vectorBalanceStepSize_x = 67;</code>
       */
      public float getVectorBalanceStepSizeX() {
        return vectorBalanceStepSizeX_;
      }
      /**
       * <code>optional float vectorBalanceStepSize_x = 67;</code>
       */
      public Builder setVectorBalanceStepSizeX(float value) {
        bitField2_ |= 0x00000004;
        vectorBalanceStepSizeX_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float vectorBalanceStepSize_x = 67;</code>
       */
      public Builder clearVectorBalanceStepSizeX() {
        bitField2_ = (bitField2_ & ~0x00000004);
        vectorBalanceStepSizeX_ = 0F;
        onChanged();
        return this;
      }

      // optional float vectorBalanceStepSize_y = 68;
      private float vectorBalanceStepSizeY_ ;
      /**
       * <code>optional float vectorBalanceStepSize_y = 68;</code>
       */
      public boolean hasVectorBalanceStepSizeY() {
        return ((bitField2_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional float vectorBalanceStepSize_y = 68;</code>
       */
      public float getVectorBalanceStepSizeY() {
        return vectorBalanceStepSizeY_;
      }
      /**
       * <code>optional float vectorBalanceStepSize_y = 68;</code>
       */
      public Builder setVectorBalanceStepSizeY(float value) {
        bitField2_ |= 0x00000008;
        vectorBalanceStepSizeY_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float vectorBalanceStepSize_y = 68;</code>
       */
      public Builder clearVectorBalanceStepSizeY() {
        bitField2_ = (bitField2_ & ~0x00000008);
        vectorBalanceStepSizeY_ = 0F;
        onChanged();
        return this;
      }

      // optional float observerMeasurementDelay = 69;
      private float observerMeasurementDelay_ ;
      /**
       * <code>optional float observerMeasurementDelay = 69;</code>
       */
      public boolean hasObserverMeasurementDelay() {
        return ((bitField2_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional float observerMeasurementDelay = 69;</code>
       */
      public float getObserverMeasurementDelay() {
        return observerMeasurementDelay_;
      }
      /**
       * <code>optional float observerMeasurementDelay = 69;</code>
       */
      public Builder setObserverMeasurementDelay(float value) {
        bitField2_ |= 0x00000010;
        observerMeasurementDelay_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float observerMeasurementDelay = 69;</code>
       */
      public Builder clearObserverMeasurementDelay() {
        bitField2_ = (bitField2_ & ~0x00000010);
        observerMeasurementDelay_ = 0F;
        onChanged();
        return this;
      }

      // optional float vectorObserverMeasurementDeviation_x = 70;
      private float vectorObserverMeasurementDeviationX_ ;
      /**
       * <code>optional float vectorObserverMeasurementDeviation_x = 70;</code>
       */
      public boolean hasVectorObserverMeasurementDeviationX() {
        return ((bitField2_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional float vectorObserverMeasurementDeviation_x = 70;</code>
       */
      public float getVectorObserverMeasurementDeviationX() {
        return vectorObserverMeasurementDeviationX_;
      }
      /**
       * <code>optional float vectorObserverMeasurementDeviation_x = 70;</code>
       */
      public Builder setVectorObserverMeasurementDeviationX(float value) {
        bitField2_ |= 0x00000020;
        vectorObserverMeasurementDeviationX_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float vectorObserverMeasurementDeviation_x = 70;</code>
       */
      public Builder clearVectorObserverMeasurementDeviationX() {
        bitField2_ = (bitField2_ & ~0x00000020);
        vectorObserverMeasurementDeviationX_ = 0F;
        onChanged();
        return this;
      }

      // optional float vectorObserverMeasurementDeviation_y = 71;
      private float vectorObserverMeasurementDeviationY_ ;
      /**
       * <code>optional float vectorObserverMeasurementDeviation_y = 71;</code>
       */
      public boolean hasVectorObserverMeasurementDeviationY() {
        return ((bitField2_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional float vectorObserverMeasurementDeviation_y = 71;</code>
       */
      public float getVectorObserverMeasurementDeviationY() {
        return vectorObserverMeasurementDeviationY_;
      }
      /**
       * <code>optional float vectorObserverMeasurementDeviation_y = 71;</code>
       */
      public Builder setVectorObserverMeasurementDeviationY(float value) {
        bitField2_ |= 0x00000040;
        vectorObserverMeasurementDeviationY_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float vectorObserverMeasurementDeviation_y = 71;</code>
       */
      public Builder clearVectorObserverMeasurementDeviationY() {
        bitField2_ = (bitField2_ & ~0x00000040);
        vectorObserverMeasurementDeviationY_ = 0F;
        onChanged();
        return this;
      }

      // optional float vectorObserverProcessDeviation_x = 72;
      private float vectorObserverProcessDeviationX_ ;
      /**
       * <code>optional float vectorObserverProcessDeviation_x = 72;</code>
       */
      public boolean hasVectorObserverProcessDeviationX() {
        return ((bitField2_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional float vectorObserverProcessDeviation_x = 72;</code>
       */
      public float getVectorObserverProcessDeviationX() {
        return vectorObserverProcessDeviationX_;
      }
      /**
       * <code>optional float vectorObserverProcessDeviation_x = 72;</code>
       */
      public Builder setVectorObserverProcessDeviationX(float value) {
        bitField2_ |= 0x00000080;
        vectorObserverProcessDeviationX_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float vectorObserverProcessDeviation_x = 72;</code>
       */
      public Builder clearVectorObserverProcessDeviationX() {
        bitField2_ = (bitField2_ & ~0x00000080);
        vectorObserverProcessDeviationX_ = 0F;
        onChanged();
        return this;
      }

      // optional float vectorObserverProcessDeviation_y = 73;
      private float vectorObserverProcessDeviationY_ ;
      /**
       * <code>optional float vectorObserverProcessDeviation_y = 73;</code>
       */
      public boolean hasVectorObserverProcessDeviationY() {
        return ((bitField2_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional float vectorObserverProcessDeviation_y = 73;</code>
       */
      public float getVectorObserverProcessDeviationY() {
        return vectorObserverProcessDeviationY_;
      }
      /**
       * <code>optional float vectorObserverProcessDeviation_y = 73;</code>
       */
      public Builder setVectorObserverProcessDeviationY(float value) {
        bitField2_ |= 0x00000100;
        vectorObserverProcessDeviationY_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float vectorObserverProcessDeviation_y = 73;</code>
       */
      public Builder clearVectorObserverProcessDeviationY() {
        bitField2_ = (bitField2_ & ~0x00000100);
        vectorObserverProcessDeviationY_ = 0F;
        onChanged();
        return this;
      }

      // optional float vectorObserverProcessDeviation_z = 74;
      private float vectorObserverProcessDeviationZ_ ;
      /**
       * <code>optional float vectorObserverProcessDeviation_z = 74;</code>
       */
      public boolean hasVectorObserverProcessDeviationZ() {
        return ((bitField2_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional float vectorObserverProcessDeviation_z = 74;</code>
       */
      public float getVectorObserverProcessDeviationZ() {
        return vectorObserverProcessDeviationZ_;
      }
      /**
       * <code>optional float vectorObserverProcessDeviation_z = 74;</code>
       */
      public Builder setVectorObserverProcessDeviationZ(float value) {
        bitField2_ |= 0x00000200;
        vectorObserverProcessDeviationZ_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float vectorObserverProcessDeviation_z = 74;</code>
       */
      public Builder clearVectorObserverProcessDeviationZ() {
        bitField2_ = (bitField2_ & ~0x00000200);
        vectorObserverProcessDeviationZ_ = 0F;
        onChanged();
        return this;
      }

      // optional float vectorObserverProcessDeviation_w = 75;
      private float vectorObserverProcessDeviationW_ ;
      /**
       * <code>optional float vectorObserverProcessDeviation_w = 75;</code>
       */
      public boolean hasVectorObserverProcessDeviationW() {
        return ((bitField2_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional float vectorObserverProcessDeviation_w = 75;</code>
       */
      public float getVectorObserverProcessDeviationW() {
        return vectorObserverProcessDeviationW_;
      }
      /**
       * <code>optional float vectorObserverProcessDeviation_w = 75;</code>
       */
      public Builder setVectorObserverProcessDeviationW(float value) {
        bitField2_ |= 0x00000400;
        vectorObserverProcessDeviationW_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float vectorObserverProcessDeviation_w = 75;</code>
       */
      public Builder clearVectorObserverProcessDeviationW() {
        bitField2_ = (bitField2_ & ~0x00000400);
        vectorObserverProcessDeviationW_ = 0F;
        onChanged();
        return this;
      }

      // optional float odometryScale_rot = 76;
      private float odometryScaleRot_ ;
      /**
       * <code>optional float odometryScale_rot = 76;</code>
       */
      public boolean hasOdometryScaleRot() {
        return ((bitField2_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional float odometryScale_rot = 76;</code>
       */
      public float getOdometryScaleRot() {
        return odometryScaleRot_;
      }
      /**
       * <code>optional float odometryScale_rot = 76;</code>
       */
      public Builder setOdometryScaleRot(float value) {
        bitField2_ |= 0x00000800;
        odometryScaleRot_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float odometryScale_rot = 76;</code>
       */
      public Builder clearOdometryScaleRot() {
        bitField2_ = (bitField2_ & ~0x00000800);
        odometryScaleRot_ = 0F;
        onChanged();
        return this;
      }

      // optional float odometryScale_Vector_x = 77;
      private float odometryScaleVectorX_ ;
      /**
       * <code>optional float odometryScale_Vector_x = 77;</code>
       */
      public boolean hasOdometryScaleVectorX() {
        return ((bitField2_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional float odometryScale_Vector_x = 77;</code>
       */
      public float getOdometryScaleVectorX() {
        return odometryScaleVectorX_;
      }
      /**
       * <code>optional float odometryScale_Vector_x = 77;</code>
       */
      public Builder setOdometryScaleVectorX(float value) {
        bitField2_ |= 0x00001000;
        odometryScaleVectorX_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float odometryScale_Vector_x = 77;</code>
       */
      public Builder clearOdometryScaleVectorX() {
        bitField2_ = (bitField2_ & ~0x00001000);
        odometryScaleVectorX_ = 0F;
        onChanged();
        return this;
      }

      // optional float odometryScale_Vector_y = 78;
      private float odometryScaleVectorY_ ;
      /**
       * <code>optional float odometryScale_Vector_y = 78;</code>
       */
      public boolean hasOdometryScaleVectorY() {
        return ((bitField2_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>optional float odometryScale_Vector_y = 78;</code>
       */
      public float getOdometryScaleVectorY() {
        return odometryScaleVectorY_;
      }
      /**
       * <code>optional float odometryScale_Vector_y = 78;</code>
       */
      public Builder setOdometryScaleVectorY(float value) {
        bitField2_ |= 0x00002000;
        odometryScaleVectorY_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float odometryScale_Vector_y = 78;</code>
       */
      public Builder clearOdometryScaleVectorY() {
        bitField2_ = (bitField2_ & ~0x00002000);
        odometryScaleVectorY_ = 0F;
        onChanged();
        return this;
      }

      // optional float gyroStateGain = 79;
      private float gyroStateGain_ ;
      /**
       * <code>optional float gyroStateGain = 79;</code>
       */
      public boolean hasGyroStateGain() {
        return ((bitField2_ & 0x00004000) == 0x00004000);
      }
      /**
       * <code>optional float gyroStateGain = 79;</code>
       */
      public float getGyroStateGain() {
        return gyroStateGain_;
      }
      /**
       * <code>optional float gyroStateGain = 79;</code>
       */
      public Builder setGyroStateGain(float value) {
        bitField2_ |= 0x00004000;
        gyroStateGain_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float gyroStateGain = 79;</code>
       */
      public Builder clearGyroStateGain() {
        bitField2_ = (bitField2_ & ~0x00004000);
        gyroStateGain_ = 0F;
        onChanged();
        return this;
      }

      // optional float gyroDerivativeGain = 80;
      private float gyroDerivativeGain_ ;
      /**
       * <code>optional float gyroDerivativeGain = 80;</code>
       */
      public boolean hasGyroDerivativeGain() {
        return ((bitField2_ & 0x00008000) == 0x00008000);
      }
      /**
       * <code>optional float gyroDerivativeGain = 80;</code>
       */
      public float getGyroDerivativeGain() {
        return gyroDerivativeGain_;
      }
      /**
       * <code>optional float gyroDerivativeGain = 80;</code>
       */
      public Builder setGyroDerivativeGain(float value) {
        bitField2_ |= 0x00008000;
        gyroDerivativeGain_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float gyroDerivativeGain = 80;</code>
       */
      public Builder clearGyroDerivativeGain() {
        bitField2_ = (bitField2_ & ~0x00008000);
        gyroDerivativeGain_ = 0F;
        onChanged();
        return this;
      }

      // optional float gyroSmoothing = 81;
      private float gyroSmoothing_ ;
      /**
       * <code>optional float gyroSmoothing = 81;</code>
       */
      public boolean hasGyroSmoothing() {
        return ((bitField2_ & 0x00010000) == 0x00010000);
      }
      /**
       * <code>optional float gyroSmoothing = 81;</code>
       */
      public float getGyroSmoothing() {
        return gyroSmoothing_;
      }
      /**
       * <code>optional float gyroSmoothing = 81;</code>
       */
      public Builder setGyroSmoothing(float value) {
        bitField2_ |= 0x00010000;
        gyroSmoothing_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float gyroSmoothing = 81;</code>
       */
      public Builder clearGyroSmoothing() {
        bitField2_ = (bitField2_ & ~0x00010000);
        gyroSmoothing_ = 0F;
        onChanged();
        return this;
      }

      // optional float minRotationToReduceStepSize = 82;
      private float minRotationToReduceStepSize_ ;
      /**
       * <code>optional float minRotationToReduceStepSize = 82;</code>
       */
      public boolean hasMinRotationToReduceStepSize() {
        return ((bitField2_ & 0x00020000) == 0x00020000);
      }
      /**
       * <code>optional float minRotationToReduceStepSize = 82;</code>
       */
      public float getMinRotationToReduceStepSize() {
        return minRotationToReduceStepSize_;
      }
      /**
       * <code>optional float minRotationToReduceStepSize = 82;</code>
       */
      public Builder setMinRotationToReduceStepSize(float value) {
        bitField2_ |= 0x00020000;
        minRotationToReduceStepSize_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float minRotationToReduceStepSize = 82;</code>
       */
      public Builder clearMinRotationToReduceStepSize() {
        bitField2_ = (bitField2_ & ~0x00020000);
        minRotationToReduceStepSize_ = 0F;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:messages.WalkEnginePreferences)
    }

    static {
      defaultInstance = new WalkEnginePreferences(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:messages.WalkEnginePreferences)
  }

  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_messages_WalkEnginePreferences_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_messages_WalkEnginePreferences_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\026EngineParameters.proto\022\010messages\"\310\025\n\025W" +
      "alkEnginePreferences\022\033\n\023vectorStandComPo" +
      "s_y\030\001 \001(\002\022\033\n\023vectorStandComPos_z\030\002 \001(\002\022\025" +
      "\n\rstandBodyTilt\030\003 \001(\002\022\"\n\032vectorStandArmJ" +
      "ointAngle_x\030\004 \001(\002\022\"\n\032vectorStandArmJoint" +
      "Angle_y\030\005 \001(\002\022\037\n\027standHardnessAnklePitch" +
      "\030\006 \001(\003\022\036\n\026standHardnessAnkleRoll\030\007 \001(\003\022\027" +
      "\n\017vectorWalkRef_x\030\010 \001(\002\022\027\n\017vectorWalkRef" +
      "_y\030\t \001(\002\022\"\n\032vectorWalkRefAtFullSpeed_x\030\n" +
      " \001(\002\022\"\n\032vectorWalkRefAtFullSpeed_y\030\013 \001(\002",
      "\022%\n\035rangeWalkRefPlanningLimit_low\030\014 \001(\002\022" +
      "&\n\036rangeWalkRefPlanningLimit_high\030\r \001(\002\022" +
      "\036\n\026rangeWalkRefXLimit_low\030\016 \001(\002\022\037\n\027range" +
      "WalkRefXLimit_high\030\017 \001(\002\022\036\n\026rangeWalkRef" +
      "YLimit_low\030\020 \001(\002\022\037\n\027rangeWalkRefYLimit_h" +
      "igh\030\021 \001(\002\022+\n#rangeWalkStepSizeXPlanningL" +
      "imit_low\030\022 \001(\002\022,\n$rangeWalkStepSizeXPlan" +
      "ningLimit_high\030\023 \001(\002\022#\n\033rangeWalkStepSiz" +
      "eXLimit_low\030\024 \001(\002\022$\n\034rangeWalkStepSizeXL" +
      "imit_high\030\025 \001(\002\022\030\n\020walkStepDuration\030\026 \001(",
      "\002\022$\n\034walkStepDurationAtFullSpeedX\030\027 \001(\002\022" +
      "$\n\034walkStepDurationAtFullSpeedY\030\030 \001(\002\022\032\n" +
      "\022vectorWalkHeight_x\030\031 \001(\002\022\032\n\022vectorWalkH" +
      "eight_y\030\032 \001(\002\022#\n\033walkArmRotationAtFullSp" +
      "eedX\030\033 \001(\002\022\036\n\026walkMovePhaseBeginning\030\034 \001" +
      "(\002\022\033\n\023walkMovePhaseLength\030\035 \001(\002\022\036\n\026walkL" +
      "iftPhaseBeginning\030\036 \001(\002\022\033\n\023walkLiftPhase" +
      "Length\030\037 \001(\002\022\036\n\026vectorWalkLiftOffSet_x\030 " +
      " \001(\002\022\036\n\026vectorWalkLiftOffSet_y\030! \001(\002\022\036\n\026" +
      "vectorWalkLiftOffSet_z\030\" \001(\002\022*\n\"vectorWa",
      "lkLiftOffSetAtFullSpeedX_x\030# \001(\002\022*\n\"vect" +
      "orWalkLiftOffSetAtFullSpeedX_y\030$ \001(\002\022*\n\"" +
      "vectorWalkLiftOffSetAtFullSpeedX_z\030% \001(\002" +
      "\022*\n\"vectorWalkLiftOffSetAtFullSpeedY_x\030&" +
      " \001(\002\022*\n\"vectorWalkLiftOffSetAtFullSpeedY" +
      "_y\030\' \001(\002\022*\n\"vectorWalkLiftOffSetAtFullSp" +
      "eedY_z\030( \001(\002\022 \n\030vectorWalkLiftRotation_x" +
      "\030) \001(\002\022 \n\030vectorWalkLiftRotation_y\030* \001(\002" +
      "\022 \n\030vectorWalkLiftRotation_z\030+ \001(\002\022\033\n\023wa" +
      "lkSupportRotation\030, \001(\002\022\033\n\023walkComLiftOf",
      "fSet_x\030- \001(\002\022\033\n\023walkComLiftOffSet_y\030. \001(" +
      "\002\022\033\n\023walkComLiftOffSet_z\030/ \001(\002\022\033\n\023walkCo" +
      "mBodyRotation\0300 \001(\002\022\024\n\014speedMax_rot\0301 \001(" +
      "\002\022\031\n\021speedMax_Vector_x\0302 \001(\002\022\031\n\021speedMax" +
      "_Vector_y\0303 \001(\002\022\031\n\021speedMaxBackwards\0304 \001" +
      "(\002\022\032\n\022speedMaxChange_rot\0305 \001(\002\022\037\n\027speedM" +
      "axChange_Vector_x\0306 \001(\002\022\037\n\027speedMaxChang" +
      "e_Vector_y\0307 \001(\002\022\017\n\007balance\0308 \001(\010\022#\n\033vec" +
      "torBalanceBodyRotation_x\0309 \001(\002\022#\n\033vector" +
      "BalanceBodyRotation_y\030: \001(\002\022\032\n\022vectorBal",
      "anceCom_x\030; \001(\002\022\032\n\022vectorBalanceCom_y\030< " +
      "\001(\002\022\"\n\032vectorBalanceComVelocity_x\030= \001(\002\022" +
      "\"\n\032vectorBalanceComVelocity_y\030> \001(\002\022\032\n\022v" +
      "ectorBalanceRef_x\030? \001(\002\022\032\n\022vectorBalance" +
      "Ref_y\030@ \001(\002\022\036\n\026vectorBalanceNextRef_x\030A " +
      "\001(\002\022\036\n\026vectorBalanceNextRef_y\030B \001(\002\022\037\n\027v" +
      "ectorBalanceStepSize_x\030C \001(\002\022\037\n\027vectorBa" +
      "lanceStepSize_y\030D \001(\002\022 \n\030observerMeasure" +
      "mentDelay\030E \001(\002\022,\n$vectorObserverMeasure" +
      "mentDeviation_x\030F \001(\002\022,\n$vectorObserverM",
      "easurementDeviation_y\030G \001(\002\022(\n vectorObs" +
      "erverProcessDeviation_x\030H \001(\002\022(\n vectorO" +
      "bserverProcessDeviation_y\030I \001(\002\022(\n vecto" +
      "rObserverProcessDeviation_z\030J \001(\002\022(\n vec" +
      "torObserverProcessDeviation_w\030K \001(\002\022\031\n\021o" +
      "dometryScale_rot\030L \001(\002\022\036\n\026odometryScale_" +
      "Vector_x\030M \001(\002\022\036\n\026odometryScale_Vector_y" +
      "\030N \001(\002\022\025\n\rgyroStateGain\030O \001(\002\022\032\n\022gyroDer" +
      "ivativeGain\030P \001(\002\022\025\n\rgyroSmoothing\030Q \001(\002" +
      "\022#\n\033minRotationToReduceStepSize\030R \001(\002"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_messages_WalkEnginePreferences_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_messages_WalkEnginePreferences_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_messages_WalkEnginePreferences_descriptor,
              new java.lang.String[] { "VectorStandComPosY", "VectorStandComPosZ", "StandBodyTilt", "VectorStandArmJointAngleX", "VectorStandArmJointAngleY", "StandHardnessAnklePitch", "StandHardnessAnkleRoll", "VectorWalkRefX", "VectorWalkRefY", "VectorWalkRefAtFullSpeedX", "VectorWalkRefAtFullSpeedY", "RangeWalkRefPlanningLimitLow", "RangeWalkRefPlanningLimitHigh", "RangeWalkRefXLimitLow", "RangeWalkRefXLimitHigh", "RangeWalkRefYLimitLow", "RangeWalkRefYLimitHigh", "RangeWalkStepSizeXPlanningLimitLow", "RangeWalkStepSizeXPlanningLimitHigh", "RangeWalkStepSizeXLimitLow", "RangeWalkStepSizeXLimitHigh", "WalkStepDuration", "WalkStepDurationAtFullSpeedX", "WalkStepDurationAtFullSpeedY", "VectorWalkHeightX", "VectorWalkHeightY", "WalkArmRotationAtFullSpeedX", "WalkMovePhaseBeginning", "WalkMovePhaseLength", "WalkLiftPhaseBeginning", "WalkLiftPhaseLength", "VectorWalkLiftOffSetX", "VectorWalkLiftOffSetY", "VectorWalkLiftOffSetZ", "VectorWalkLiftOffSetAtFullSpeedXX", "VectorWalkLiftOffSetAtFullSpeedXY", "VectorWalkLiftOffSetAtFullSpeedXZ", "VectorWalkLiftOffSetAtFullSpeedYX", "VectorWalkLiftOffSetAtFullSpeedYY", "VectorWalkLiftOffSetAtFullSpeedYZ", "VectorWalkLiftRotationX", "VectorWalkLiftRotationY", "VectorWalkLiftRotationZ", "WalkSupportRotation", "WalkComLiftOffSetX", "WalkComLiftOffSetY", "WalkComLiftOffSetZ", "WalkComBodyRotation", "SpeedMaxRot", "SpeedMaxVectorX", "SpeedMaxVectorY", "SpeedMaxBackwards", "SpeedMaxChangeRot", "SpeedMaxChangeVectorX", "SpeedMaxChangeVectorY", "Balance", "VectorBalanceBodyRotationX", "VectorBalanceBodyRotationY", "VectorBalanceComX", "VectorBalanceComY", "VectorBalanceComVelocityX", "VectorBalanceComVelocityY", "VectorBalanceRefX", "VectorBalanceRefY", "VectorBalanceNextRefX", "VectorBalanceNextRefY", "VectorBalanceStepSizeX", "VectorBalanceStepSizeY", "ObserverMeasurementDelay", "VectorObserverMeasurementDeviationX", "VectorObserverMeasurementDeviationY", "VectorObserverProcessDeviationX", "VectorObserverProcessDeviationY", "VectorObserverProcessDeviationZ", "VectorObserverProcessDeviationW", "OdometryScaleRot", "OdometryScaleVectorX", "OdometryScaleVectorY", "GyroStateGain", "GyroDerivativeGain", "GyroSmoothing", "MinRotationToReduceStepSize", });
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
